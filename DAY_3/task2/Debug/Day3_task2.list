
Day3_task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800355c  0800355c  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003564  08003564  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000007c  080035e8  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080035e8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090ae  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017dd  00000000  00000000  0002915a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002a938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  0002b0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b2d  00000000  00000000  0002b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096f2  00000000  00000000  0004d2ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9968  00000000  00000000  0005699f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120307  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f8  00000000  00000000  00120358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003448 	.word	0x08003448

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000080 	.word	0x20000080
 800020c:	08003448 	.word	0x08003448

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005c4:	f003 0301 	and.w	r3, r3, #1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d013      	beq.n	80005f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00b      	beq.n	80005f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005dc:	e000      	b.n	80005e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005f4:	687b      	ldr	r3, [r7, #4]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	60f8      	str	r0, [r7, #12]
 800060a:	60b9      	str	r1, [r7, #8]
 800060c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
 8000612:	e009      	b.n	8000628 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	1c5a      	adds	r2, r3, #1
 8000618:	60ba      	str	r2, [r7, #8]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffc9 	bl	80005b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	dbf1      	blt.n	8000614 <_write+0x12>
  }
  return len;
 8000630:	687b      	ldr	r3, [r7, #4]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fb37 	bl	8000cb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f805 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 f89b 	bl	8000780 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 f86f 	bl	800072c <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x14>

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 ff5c 	bl	800251c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a29      	ldr	r2, [pc, #164]	; (8000724 <SystemClock_Config+0xd4>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SystemClock_Config+0xd4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000690:	2300      	movs	r3, #0
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069c:	4a22      	ldr	r2, [pc, #136]	; (8000728 <SystemClock_Config+0xd8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b20      	ldr	r3, [pc, #128]	; (8000728 <SystemClock_Config+0xd8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c4:	2308      	movs	r3, #8
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006c8:	2354      	movs	r3, #84	; 0x54
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f993 	bl	8001a08 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006e8:	f000 f971 	bl	80009ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2102      	movs	r1, #2
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fe32 	bl	8001374 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000716:	f000 f95a 	bl	80009ce <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	; (800077c <MX_USART2_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_USART2_UART_Init+0x4c>)
 8000764:	f001 fbee 	bl	8001f44 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f92e 	bl	80009ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000098 	.word	0x20000098
 800077c:	40004400 	.word	0x40004400

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <MX_GPIO_Init+0x124>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a41      	ldr	r2, [pc, #260]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b3f      	ldr	r3, [pc, #252]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a3a      	ldr	r2, [pc, #232]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a2c      	ldr	r2, [pc, #176]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007f4:	f043 0302 	orr.w	r3, r3, #2
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <MX_GPIO_Init+0x124>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0302 	and.w	r3, r3, #2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	210f      	movs	r1, #15
 800080a:	4827      	ldr	r0, [pc, #156]	; (80008a8 <MX_GPIO_Init+0x128>)
 800080c:	f000 fd80 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2120      	movs	r1, #32
 8000814:	4825      	ldr	r0, [pc, #148]	; (80008ac <MX_GPIO_Init+0x12c>)
 8000816:	f000 fd7b 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	481d      	ldr	r0, [pc, #116]	; (80008a8 <MX_GPIO_Init+0x128>)
 8000832:	f000 fbc1 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000836:	230f      	movs	r3, #15
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <MX_GPIO_Init+0x128>)
 800084e:	f000 fbb3 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4810      	ldr	r0, [pc, #64]	; (80008ac <MX_GPIO_Init+0x12c>)
 800086a:	f000 fba5 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : C1_Pin C2_Pin C3_Pin */
  GPIO_InitStruct.Pin = C1_Pin|C2_Pin|C3_Pin;
 800086e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000874:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_GPIO_Init+0x12c>)
 8000886:	f000 fb97 	bl	8000fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2017      	movs	r0, #23
 8000890:	f000 fb5b 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000894:	2017      	movs	r0, #23
 8000896:	f000 fb74 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	; 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020800 	.word	0x40020800
 80008ac:	40020000 	.word	0x40020000

080008b0 <scan_keypad>:

/* USER CODE BEGIN 4 */

void scan_keypad(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

    HAL_GPIO_WritePin(GPIOC, R1_Pin | R2_Pin | R3_Pin | R4_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	210f      	movs	r1, #15
 80008ba:	4833      	ldr	r0, [pc, #204]	; (8000988 <scan_keypad+0xd8>)
 80008bc:	f000 fd28 	bl	8001310 <HAL_GPIO_WritePin>


    for (int row = 0; row < 4; row++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	e05a      	b.n	800097c <scan_keypad+0xcc>
    {
        HAL_GPIO_WritePin(GPIOC, (R1_Pin << row), GPIO_PIN_RESET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	2200      	movs	r2, #0
 80008d2:	4619      	mov	r1, r3
 80008d4:	482c      	ldr	r0, [pc, #176]	; (8000988 <scan_keypad+0xd8>)
 80008d6:	f000 fd1b 	bl	8001310 <HAL_GPIO_WritePin>

        for (int col = 0; col < 3; col++)
 80008da:	2300      	movs	r3, #0
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	e03d      	b.n	800095c <scan_keypad+0xac>
        {
            if (HAL_GPIO_ReadPin(GPIOA, (C1_Pin << col)) == GPIO_PIN_RESET)
 80008e0:	2240      	movs	r2, #64	; 0x40
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	4619      	mov	r1, r3
 80008ec:	4827      	ldr	r0, [pc, #156]	; (800098c <scan_keypad+0xdc>)
 80008ee:	f000 fcf7 	bl	80012e0 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d12e      	bne.n	8000956 <scan_keypad+0xa6>
            {
                pressed_key = keypad[row][col];
 80008f8:	4925      	ldr	r1, [pc, #148]	; (8000990 <scan_keypad+0xe0>)
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	18ca      	adds	r2, r1, r3
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	4b22      	ldr	r3, [pc, #136]	; (8000994 <scan_keypad+0xe4>)
 800090c:	701a      	strb	r2, [r3, #0]
                printf("Pressed Key: %c\n", pressed_key);
 800090e:	4b21      	ldr	r3, [pc, #132]	; (8000994 <scan_keypad+0xe4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4619      	mov	r1, r3
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <scan_keypad+0xe8>)
 8000916:	f001 fe09 	bl	800252c <iprintf>
                printf("Scanning Row: %d\n", row);
 800091a:	6879      	ldr	r1, [r7, #4]
 800091c:	481f      	ldr	r0, [pc, #124]	; (800099c <scan_keypad+0xec>)
 800091e:	f001 fe05 	bl	800252c <iprintf>
                printf("Checking Column: %d, Pin State: %d\n", col, HAL_GPIO_ReadPin(GPIOA, (C1_Pin << col)));
 8000922:	2240      	movs	r2, #64	; 0x40
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	b29b      	uxth	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	4817      	ldr	r0, [pc, #92]	; (800098c <scan_keypad+0xdc>)
 8000930:	f000 fcd6 	bl	80012e0 <HAL_GPIO_ReadPin>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	6839      	ldr	r1, [r7, #0]
 800093a:	4819      	ldr	r0, [pc, #100]	; (80009a0 <scan_keypad+0xf0>)
 800093c:	f001 fdf6 	bl	800252c <iprintf>


                HAL_GPIO_WritePin(GPIOC, (R1_Pin << row), GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	b29b      	uxth	r3, r3
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <scan_keypad+0xd8>)
 8000950:	f000 fcde 	bl	8001310 <HAL_GPIO_WritePin>

                return;
 8000954:	e015      	b.n	8000982 <scan_keypad+0xd2>
        for (int col = 0; col < 3; col++)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b02      	cmp	r3, #2
 8000960:	ddbe      	ble.n	80008e0 <scan_keypad+0x30>
            }
        }
        HAL_GPIO_WritePin(GPIOC, (R1_Pin << row), GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	b29b      	uxth	r3, r3
 800096c:	2201      	movs	r2, #1
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <scan_keypad+0xd8>)
 8000972:	f000 fccd 	bl	8001310 <HAL_GPIO_WritePin>
    for (int row = 0; row < 4; row++)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3301      	adds	r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b03      	cmp	r3, #3
 8000980:	dda1      	ble.n	80008c6 <scan_keypad+0x16>

    }
}
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000
 8000990:	20000000 	.word	0x20000000
 8000994:	200000dc 	.word	0x200000dc
 8000998:	08003460 	.word	0x08003460
 800099c:	08003474 	.word	0x08003474
 80009a0:	08003488 	.word	0x08003488

080009a4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == C1_Pin || GPIO_Pin == C2_Pin || GPIO_Pin == C3_Pin)
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2b40      	cmp	r3, #64	; 0x40
 80009b2:	d006      	beq.n	80009c2 <HAL_GPIO_EXTI_Callback+0x1e>
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	2b80      	cmp	r3, #128	; 0x80
 80009b8:	d003      	beq.n	80009c2 <HAL_GPIO_EXTI_Callback+0x1e>
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_EXTI_Callback+0x22>
    {
        scan_keypad();
 80009c2:	f7ff ff75 	bl	80008b0 <scan_keypad>
    }
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d2:	b672      	cpsid	i
}
 80009d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a16:	2007      	movs	r0, #7
 8000a18:	f000 fa8c 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	; 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a19      	ldr	r2, [pc, #100]	; (8000aac <HAL_UART_MspInit+0x84>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d12b      	bne.n	8000aa2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_UART_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a82:	230c      	movs	r3, #12
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_UART_MspInit+0x8c>)
 8000a9e:	f000 fa8b 	bl	8000fb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f926 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(C1_Pin);
 8000b10:	2040      	movs	r0, #64	; 0x40
 8000b12:	f000 fc17 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C2_Pin);
 8000b16:	2080      	movs	r0, #128	; 0x80
 8000b18:	f000 fc14 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(C3_Pin);
 8000b1c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b20:	f000 fc10 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
  }

  return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f001 fc64 	bl	80024c8 <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20020000 	.word	0x20020000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200000e0 	.word	0x200000e0
 8000c34:	200000f8 	.word	0x200000f8

08000c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <SystemInit+0x20>)
 8000c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <SystemInit+0x20>)
 8000c44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c62:	490e      	ldr	r1, [pc, #56]	; (8000c9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c78:	4c0b      	ldr	r4, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c86:	f7ff ffd7 	bl	8000c38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f001 fc23 	bl	80024d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8e:	f7ff fcd4 	bl	800063a <main>
  bx  lr    
 8000c92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ca0:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8000ca4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ca8:	200000f8 	.word	0x200000f8

08000cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <HAL_Init+0x40>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <HAL_Init+0x40>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	; (8000cf0 <HAL_Init+0x40>)
 8000cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 f92b 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fe78 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023c00 	.word	0x40023c00

08000cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f943 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d30:	f000 f90b 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	20000014 	.word	0x20000014
 8000d50:	20000010 	.word	0x20000010

08000d54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	; (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000014 	.word	0x20000014
 8000d78:	200000e4 	.word	0x200000e4

08000d7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	200000e4 	.word	0x200000e4

08000d94 <__NVIC_SetPriorityGrouping>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff29 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff3e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff8e 	bl	8000e88 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff31 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e165      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8154 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80ae 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <HAL_GPIO_Init+0x300>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a5c      	ldr	r2, [pc, #368]	; (80012b8 <HAL_GPIO_Init+0x300>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b5a      	ldr	r3, [pc, #360]	; (80012b8 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_GPIO_Init+0x304>)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	; (80012c0 <HAL_GPIO_Init+0x308>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4e      	ldr	r2, [pc, #312]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4d      	ldr	r2, [pc, #308]	; (80012c8 <HAL_GPIO_Init+0x310>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4c      	ldr	r2, [pc, #304]	; (80012cc <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x20e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4b      	ldr	r2, [pc, #300]	; (80012d0 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x20a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4a      	ldr	r2, [pc, #296]	; (80012d4 <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x206>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a49      	ldr	r2, [pc, #292]	; (80012d8 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x202>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	; (80012bc <HAL_GPIO_Init+0x304>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <HAL_GPIO_Init+0x324>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a31      	ldr	r2, [pc, #196]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <HAL_GPIO_Init+0x324>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a26      	ldr	r2, [pc, #152]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001246:	4b25      	ldr	r3, [pc, #148]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <HAL_GPIO_Init+0x324>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001294:	4a11      	ldr	r2, [pc, #68]	; (80012dc <HAL_GPIO_Init+0x324>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae96 	bls.w	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	; 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800134e:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff fb1e 	bl	80009a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0cc      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001388:	4b68      	ldr	r3, [pc, #416]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d90c      	bls.n	80013b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001396:	4b65      	ldr	r3, [pc, #404]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800139e:	4b63      	ldr	r3, [pc, #396]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 030f 	and.w	r3, r3, #15
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0b8      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013c8:	4b59      	ldr	r3, [pc, #356]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	4a58      	ldr	r2, [pc, #352]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e0:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	4a52      	ldr	r2, [pc, #328]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	494d      	ldr	r1, [pc, #308]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d044      	beq.n	8001494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d107      	bne.n	8001422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b47      	ldr	r3, [pc, #284]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d119      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e07f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b02      	cmp	r3, #2
 8001428:	d003      	beq.n	8001432 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142e:	2b03      	cmp	r3, #3
 8001430:	d107      	bne.n	8001442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001432:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d109      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e06f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001442:	4b3b      	ldr	r3, [pc, #236]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e067      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f023 0203 	bic.w	r2, r3, #3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4934      	ldr	r1, [pc, #208]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	4313      	orrs	r3, r2
 8001462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001464:	f7ff fc8a 	bl	8000d7c <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146a:	e00a      	b.n	8001482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146c:	f7ff fc86 	bl	8000d7c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	f241 3288 	movw	r2, #5000	; 0x1388
 800147a:	4293      	cmp	r3, r2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e04f      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 020c 	and.w	r2, r3, #12
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	429a      	cmp	r2, r3
 8001492:	d1eb      	bne.n	800146c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d20c      	bcs.n	80014bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b20      	ldr	r3, [pc, #128]	; (800152c <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e032      	b.n	8001522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d008      	beq.n	80014da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4916      	ldr	r1, [pc, #88]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d009      	beq.n	80014fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	490e      	ldr	r1, [pc, #56]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014fa:	f000 f855 	bl	80015a8 <HAL_RCC_GetSysClockFreq>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	490a      	ldr	r1, [pc, #40]	; (8001534 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	5ccb      	ldrb	r3, [r1, r3]
 800150e:	fa22 f303 	lsr.w	r3, r2, r3
 8001512:	4a09      	ldr	r2, [pc, #36]	; (8001538 <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_RCC_ClockConfig+0x1c8>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fbea 	bl	8000cf4 <HAL_InitTick>

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023c00 	.word	0x40023c00
 8001530:	40023800 	.word	0x40023800
 8001534:	080034ac 	.word	0x080034ac
 8001538:	2000000c 	.word	0x2000000c
 800153c:	20000010 	.word	0x20000010

08001540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <HAL_RCC_GetHCLKFreq+0x14>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	2000000c 	.word	0x2000000c

08001558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800155c:	f7ff fff0 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001560:	4602      	mov	r2, r0
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	4903      	ldr	r1, [pc, #12]	; (800157c <HAL_RCC_GetPCLK1Freq+0x24>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	080034bc 	.word	0x080034bc

08001580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001584:	f7ff ffdc 	bl	8001540 <HAL_RCC_GetHCLKFreq>
 8001588:	4602      	mov	r2, r0
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	0b5b      	lsrs	r3, r3, #13
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	4903      	ldr	r1, [pc, #12]	; (80015a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001596:	5ccb      	ldrb	r3, [r1, r3]
 8001598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	080034bc 	.word	0x080034bc

080015a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ac:	b0ae      	sub	sp, #184	; 0xb8
 80015ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ce:	4bcb      	ldr	r3, [pc, #812]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	f200 8206 	bhi.w	80019e8 <HAL_RCC_GetSysClockFreq+0x440>
 80015dc:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	08001619 	.word	0x08001619
 80015e8:	080019e9 	.word	0x080019e9
 80015ec:	080019e9 	.word	0x080019e9
 80015f0:	080019e9 	.word	0x080019e9
 80015f4:	08001621 	.word	0x08001621
 80015f8:	080019e9 	.word	0x080019e9
 80015fc:	080019e9 	.word	0x080019e9
 8001600:	080019e9 	.word	0x080019e9
 8001604:	08001629 	.word	0x08001629
 8001608:	080019e9 	.word	0x080019e9
 800160c:	080019e9 	.word	0x080019e9
 8001610:	080019e9 	.word	0x080019e9
 8001614:	08001819 	.word	0x08001819
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4bb9      	ldr	r3, [pc, #740]	; (8001900 <HAL_RCC_GetSysClockFreq+0x358>)
 800161a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800161e:	e1e7      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001620:	4bb8      	ldr	r3, [pc, #736]	; (8001904 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001626:	e1e3      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001628:	4bb4      	ldr	r3, [pc, #720]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001634:	4bb1      	ldr	r3, [pc, #708]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d071      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001640:	4bae      	ldr	r3, [pc, #696]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	099b      	lsrs	r3, r3, #6
 8001646:	2200      	movs	r2, #0
 8001648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800164c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001650:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001658:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001662:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001666:	4622      	mov	r2, r4
 8001668:	462b      	mov	r3, r5
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0159      	lsls	r1, r3, #5
 8001674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001678:	0150      	lsls	r0, r2, #5
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4621      	mov	r1, r4
 8001680:	1a51      	subs	r1, r2, r1
 8001682:	6439      	str	r1, [r7, #64]	; 0x40
 8001684:	4629      	mov	r1, r5
 8001686:	eb63 0301 	sbc.w	r3, r3, r1
 800168a:	647b      	str	r3, [r7, #68]	; 0x44
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001698:	4649      	mov	r1, r9
 800169a:	018b      	lsls	r3, r1, #6
 800169c:	4641      	mov	r1, r8
 800169e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016a2:	4641      	mov	r1, r8
 80016a4:	018a      	lsls	r2, r1, #6
 80016a6:	4641      	mov	r1, r8
 80016a8:	1a51      	subs	r1, r2, r1
 80016aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80016ac:	4649      	mov	r1, r9
 80016ae:	eb63 0301 	sbc.w	r3, r3, r1
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016c0:	4649      	mov	r1, r9
 80016c2:	00cb      	lsls	r3, r1, #3
 80016c4:	4641      	mov	r1, r8
 80016c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ca:	4641      	mov	r1, r8
 80016cc:	00ca      	lsls	r2, r1, #3
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	4622      	mov	r2, r4
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
 80016da:	462b      	mov	r3, r5
 80016dc:	460a      	mov	r2, r1
 80016de:	eb42 0303 	adc.w	r3, r2, r3
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016f0:	4629      	mov	r1, r5
 80016f2:	024b      	lsls	r3, r1, #9
 80016f4:	4621      	mov	r1, r4
 80016f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fa:	4621      	mov	r1, r4
 80016fc:	024a      	lsls	r2, r1, #9
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001706:	2200      	movs	r2, #0
 8001708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800170c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001710:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001714:	f7fe fdcc 	bl	80002b0 <__aeabi_uldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4613      	mov	r3, r2
 800171e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001722:	e067      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	4b75      	ldr	r3, [pc, #468]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	2200      	movs	r2, #0
 800172c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001730:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001734:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800173c:	67bb      	str	r3, [r7, #120]	; 0x78
 800173e:	2300      	movs	r3, #0
 8001740:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001742:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001746:	4622      	mov	r2, r4
 8001748:	462b      	mov	r3, r5
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0159      	lsls	r1, r3, #5
 8001754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001758:	0150      	lsls	r0, r2, #5
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4621      	mov	r1, r4
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	62b9      	str	r1, [r7, #40]	; 0x28
 8001764:	4629      	mov	r1, r5
 8001766:	eb63 0301 	sbc.w	r3, r3, r1
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001778:	4649      	mov	r1, r9
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4641      	mov	r1, r8
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4641      	mov	r1, r8
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	ebb2 0a01 	subs.w	sl, r2, r1
 800178c:	4649      	mov	r1, r9
 800178e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800179e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017a6:	4692      	mov	sl, r2
 80017a8:	469b      	mov	fp, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	eb1a 0303 	adds.w	r3, sl, r3
 80017b0:	623b      	str	r3, [r7, #32]
 80017b2:	462b      	mov	r3, r5
 80017b4:	eb4b 0303 	adc.w	r3, fp, r3
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017c6:	4629      	mov	r1, r5
 80017c8:	028b      	lsls	r3, r1, #10
 80017ca:	4621      	mov	r1, r4
 80017cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d0:	4621      	mov	r1, r4
 80017d2:	028a      	lsls	r2, r1, #10
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017dc:	2200      	movs	r2, #0
 80017de:	673b      	str	r3, [r7, #112]	; 0x70
 80017e0:	677a      	str	r2, [r7, #116]	; 0x74
 80017e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80017e6:	f7fe fd63 	bl	80002b0 <__aeabi_uldivmod>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4613      	mov	r3, r2
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	0c1b      	lsrs	r3, r3, #16
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	3301      	adds	r3, #1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800180a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001816:	e0eb      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001824:	4b35      	ldr	r3, [pc, #212]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d06b      	beq.n	8001908 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001830:	4b32      	ldr	r3, [pc, #200]	; (80018fc <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	099b      	lsrs	r3, r3, #6
 8001836:	2200      	movs	r2, #0
 8001838:	66bb      	str	r3, [r7, #104]	; 0x68
 800183a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800183c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800183e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001842:	663b      	str	r3, [r7, #96]	; 0x60
 8001844:	2300      	movs	r3, #0
 8001846:	667b      	str	r3, [r7, #100]	; 0x64
 8001848:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800184c:	4622      	mov	r2, r4
 800184e:	462b      	mov	r3, r5
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	0159      	lsls	r1, r3, #5
 800185a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800185e:	0150      	lsls	r0, r2, #5
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4621      	mov	r1, r4
 8001866:	1a51      	subs	r1, r2, r1
 8001868:	61b9      	str	r1, [r7, #24]
 800186a:	4629      	mov	r1, r5
 800186c:	eb63 0301 	sbc.w	r3, r3, r1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800187e:	4659      	mov	r1, fp
 8001880:	018b      	lsls	r3, r1, #6
 8001882:	4651      	mov	r1, sl
 8001884:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001888:	4651      	mov	r1, sl
 800188a:	018a      	lsls	r2, r1, #6
 800188c:	4651      	mov	r1, sl
 800188e:	ebb2 0801 	subs.w	r8, r2, r1
 8001892:	4659      	mov	r1, fp
 8001894:	eb63 0901 	sbc.w	r9, r3, r1
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018ac:	4690      	mov	r8, r2
 80018ae:	4699      	mov	r9, r3
 80018b0:	4623      	mov	r3, r4
 80018b2:	eb18 0303 	adds.w	r3, r8, r3
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	462b      	mov	r3, r5
 80018ba:	eb49 0303 	adc.w	r3, r9, r3
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018cc:	4629      	mov	r1, r5
 80018ce:	024b      	lsls	r3, r1, #9
 80018d0:	4621      	mov	r1, r4
 80018d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018d6:	4621      	mov	r1, r4
 80018d8:	024a      	lsls	r2, r1, #9
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80018e2:	2200      	movs	r2, #0
 80018e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80018e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80018ec:	f7fe fce0 	bl	80002b0 <__aeabi_uldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4613      	mov	r3, r2
 80018f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018fa:	e065      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0x420>
 80018fc:	40023800 	.word	0x40023800
 8001900:	00f42400 	.word	0x00f42400
 8001904:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001908:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x458>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	099b      	lsrs	r3, r3, #6
 800190e:	2200      	movs	r2, #0
 8001910:	4618      	mov	r0, r3
 8001912:	4611      	mov	r1, r2
 8001914:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001918:	653b      	str	r3, [r7, #80]	; 0x50
 800191a:	2300      	movs	r3, #0
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
 800191e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001922:	4642      	mov	r2, r8
 8001924:	464b      	mov	r3, r9
 8001926:	f04f 0000 	mov.w	r0, #0
 800192a:	f04f 0100 	mov.w	r1, #0
 800192e:	0159      	lsls	r1, r3, #5
 8001930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001934:	0150      	lsls	r0, r2, #5
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4641      	mov	r1, r8
 800193c:	1a51      	subs	r1, r2, r1
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	4649      	mov	r1, r9
 8001942:	eb63 0301 	sbc.w	r3, r3, r1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001954:	4659      	mov	r1, fp
 8001956:	018b      	lsls	r3, r1, #6
 8001958:	4651      	mov	r1, sl
 800195a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800195e:	4651      	mov	r1, sl
 8001960:	018a      	lsls	r2, r1, #6
 8001962:	4651      	mov	r1, sl
 8001964:	1a54      	subs	r4, r2, r1
 8001966:	4659      	mov	r1, fp
 8001968:	eb63 0501 	sbc.w	r5, r3, r1
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	00eb      	lsls	r3, r5, #3
 8001976:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197a:	00e2      	lsls	r2, r4, #3
 800197c:	4614      	mov	r4, r2
 800197e:	461d      	mov	r5, r3
 8001980:	4643      	mov	r3, r8
 8001982:	18e3      	adds	r3, r4, r3
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	464b      	mov	r3, r9
 8001988:	eb45 0303 	adc.w	r3, r5, r3
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199a:	4629      	mov	r1, r5
 800199c:	028b      	lsls	r3, r1, #10
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a4:	4621      	mov	r1, r4
 80019a6:	028a      	lsls	r2, r1, #10
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019b0:	2200      	movs	r2, #0
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80019b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019ba:	f7fe fc79 	bl	80002b0 <__aeabi_uldivmod>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4613      	mov	r3, r2
 80019c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0f1b      	lsrs	r3, r3, #28
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019e6:	e003      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	37b8      	adds	r7, #184	; 0xb8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	00f42400 	.word	0x00f42400

08001a08 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e28d      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8083 	beq.w	8001b2e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a28:	4b94      	ldr	r3, [pc, #592]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d019      	beq.n	8001a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a34:	4b91      	ldr	r3, [pc, #580]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a40:	4b8e      	ldr	r3, [pc, #568]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a4c:	d00c      	beq.n	8001a68 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4e:	4b8b      	ldr	r3, [pc, #556]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d112      	bne.n	8001a80 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a66:	d10b      	bne.n	8001a80 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	4b84      	ldr	r3, [pc, #528]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d05b      	beq.n	8001b2c <HAL_RCC_OscConfig+0x124>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d157      	bne.n	8001b2c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e25a      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d106      	bne.n	8001a98 <HAL_RCC_OscConfig+0x90>
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a7b      	ldr	r2, [pc, #492]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e01d      	b.n	8001ad4 <HAL_RCC_OscConfig+0xcc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa0:	d10c      	bne.n	8001abc <HAL_RCC_OscConfig+0xb4>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	4b73      	ldr	r3, [pc, #460]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a72      	ldr	r2, [pc, #456]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e00b      	b.n	8001ad4 <HAL_RCC_OscConfig+0xcc>
 8001abc:	4b6f      	ldr	r3, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a6e      	ldr	r2, [pc, #440]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b6c      	ldr	r3, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a6b      	ldr	r2, [pc, #428]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d013      	beq.n	8001b04 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f94e 	bl	8000d7c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae4:	f7ff f94a 	bl	8000d7c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e21f      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af6:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0xdc>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff f93a 	bl	8000d7c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b0c:	f7ff f936 	bl	8000d7c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b64      	cmp	r3, #100	; 0x64
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e20b      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	4b57      	ldr	r3, [pc, #348]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x104>
 8001b2a:	e000      	b.n	8001b2e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0302 	and.w	r3, r3, #2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06f      	beq.n	8001c1a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b3a:	4b50      	ldr	r3, [pc, #320]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d017      	beq.n	8001b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b46:	4b4d      	ldr	r3, [pc, #308]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d105      	bne.n	8001b5e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x186>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1d3      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_OscConfig+0x278>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f8e3 	bl	8000d7c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff f8df 	bl	8000d7c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1b4      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x278>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f8c2 	bl	8000d7c <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f8be 	bl	8000d7c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e193      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f8a2 	bl	8000d7c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff f89e 	bl	8000d7c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e173      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x274>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x234>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c62:	f7ff f88b 	bl	8000d7c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff f887 	bl	8000d7c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e15c      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b8a      	ldr	r3, [pc, #552]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b83      	ldr	r3, [pc, #524]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a7e      	ldr	r2, [pc, #504]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b79      	ldr	r3, [pc, #484]	; (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a75      	ldr	r2, [pc, #468]	; (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff f847 	bl	8000d7c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff f843 	bl	8000d7c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e118      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6c      	ldr	r3, [pc, #432]	; (8001eb8 <HAL_RCC_OscConfig+0x4b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x31e>
 8001d18:	4b66      	ldr	r3, [pc, #408]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a65      	ldr	r2, [pc, #404]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x358>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x340>
 8001d2e:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a60      	ldr	r2, [pc, #384]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	4b5e      	ldr	r3, [pc, #376]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a5d      	ldr	r2, [pc, #372]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x358>
 8001d48:	4b5a      	ldr	r3, [pc, #360]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a59      	ldr	r2, [pc, #356]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a56      	ldr	r2, [pc, #344]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff f808 	bl	8000d7c <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff f804 	bl	8000d7c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0d7      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x368>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7fe fff2 	bl	8000d7c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7fe ffee 	bl	8000d7c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0c1      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a3a      	ldr	r2, [pc, #232]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80ad 	beq.w	8001f34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d060      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d145      	bne.n	8001e7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b33      	ldr	r3, [pc, #204]	; (8001ebc <HAL_RCC_OscConfig+0x4b4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7fe ffc2 	bl	8000d7c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe ffbe 	bl	8000d7c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e093      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	071b      	lsls	r3, r3, #28
 8001e46:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x4b4>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7fe ff93 	bl	8000d7c <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7fe ff8f 	bl	8000d7c <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e064      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x452>
 8001e78:	e05c      	b.n	8001f34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_RCC_OscConfig+0x4b4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe ff7c 	bl	8000d7c <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e88:	f7fe ff78 	bl	8000d7c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e04d      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x480>
 8001ea6:	e045      	b.n	8001f34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e040      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000
 8001ebc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ec0:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <HAL_RCC_OscConfig+0x538>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d030      	beq.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d129      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d122      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ef6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d119      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d10f      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d107      	bne.n	8001f30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e03f      	b.n	8001fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fd5c 	bl	8000a28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f829 	bl	8001fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fe4:	b0c0      	sub	sp, #256	; 0x100
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	ea40 0301 	orr.w	r3, r0, r1
 8002008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800200a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	431a      	orrs	r2, r3
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	431a      	orrs	r2, r3
 8002020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002038:	f021 010c 	bic.w	r1, r1, #12
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002046:	430b      	orrs	r3, r1
 8002048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800204a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800205a:	6999      	ldr	r1, [r3, #24]
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	ea40 0301 	orr.w	r3, r0, r1
 8002066:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b8f      	ldr	r3, [pc, #572]	; (80022ac <UART_SetConfig+0x2cc>)
 8002070:	429a      	cmp	r2, r3
 8002072:	d005      	beq.n	8002080 <UART_SetConfig+0xa0>
 8002074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	4b8d      	ldr	r3, [pc, #564]	; (80022b0 <UART_SetConfig+0x2d0>)
 800207c:	429a      	cmp	r2, r3
 800207e:	d104      	bne.n	800208a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002080:	f7ff fa7e 	bl	8001580 <HAL_RCC_GetPCLK2Freq>
 8002084:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002088:	e003      	b.n	8002092 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800208a:	f7ff fa65 	bl	8001558 <HAL_RCC_GetPCLK1Freq>
 800208e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800209c:	f040 810c 	bne.w	80022b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020a4:	2200      	movs	r2, #0
 80020a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80020aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020b2:	4622      	mov	r2, r4
 80020b4:	462b      	mov	r3, r5
 80020b6:	1891      	adds	r1, r2, r2
 80020b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80020ba:	415b      	adcs	r3, r3
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020c2:	4621      	mov	r1, r4
 80020c4:	eb12 0801 	adds.w	r8, r2, r1
 80020c8:	4629      	mov	r1, r5
 80020ca:	eb43 0901 	adc.w	r9, r3, r1
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020e2:	4690      	mov	r8, r2
 80020e4:	4699      	mov	r9, r3
 80020e6:	4623      	mov	r3, r4
 80020e8:	eb18 0303 	adds.w	r3, r8, r3
 80020ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80020f0:	462b      	mov	r3, r5
 80020f2:	eb49 0303 	adc.w	r3, r9, r3
 80020f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80020fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002106:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800210a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800210e:	460b      	mov	r3, r1
 8002110:	18db      	adds	r3, r3, r3
 8002112:	653b      	str	r3, [r7, #80]	; 0x50
 8002114:	4613      	mov	r3, r2
 8002116:	eb42 0303 	adc.w	r3, r2, r3
 800211a:	657b      	str	r3, [r7, #84]	; 0x54
 800211c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002120:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002124:	f7fe f8c4 	bl	80002b0 <__aeabi_uldivmod>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <UART_SetConfig+0x2d4>)
 800212e:	fba3 2302 	umull	r2, r3, r3, r2
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	011c      	lsls	r4, r3, #4
 8002136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800213a:	2200      	movs	r2, #0
 800213c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002140:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002144:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002148:	4642      	mov	r2, r8
 800214a:	464b      	mov	r3, r9
 800214c:	1891      	adds	r1, r2, r2
 800214e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002150:	415b      	adcs	r3, r3
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002154:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002158:	4641      	mov	r1, r8
 800215a:	eb12 0a01 	adds.w	sl, r2, r1
 800215e:	4649      	mov	r1, r9
 8002160:	eb43 0b01 	adc.w	fp, r3, r1
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002170:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002178:	4692      	mov	sl, r2
 800217a:	469b      	mov	fp, r3
 800217c:	4643      	mov	r3, r8
 800217e:	eb1a 0303 	adds.w	r3, sl, r3
 8002182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002186:	464b      	mov	r3, r9
 8002188:	eb4b 0303 	adc.w	r3, fp, r3
 800218c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800219c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80021a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80021a4:	460b      	mov	r3, r1
 80021a6:	18db      	adds	r3, r3, r3
 80021a8:	643b      	str	r3, [r7, #64]	; 0x40
 80021aa:	4613      	mov	r3, r2
 80021ac:	eb42 0303 	adc.w	r3, r2, r3
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
 80021b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80021ba:	f7fe f879 	bl	80002b0 <__aeabi_uldivmod>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4611      	mov	r1, r2
 80021c4:	4b3b      	ldr	r3, [pc, #236]	; (80022b4 <UART_SetConfig+0x2d4>)
 80021c6:	fba3 2301 	umull	r2, r3, r3, r1
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2264      	movs	r2, #100	; 0x64
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	1acb      	subs	r3, r1, r3
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80021da:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <UART_SetConfig+0x2d4>)
 80021dc:	fba3 2302 	umull	r2, r3, r3, r2
 80021e0:	095b      	lsrs	r3, r3, #5
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021e8:	441c      	add	r4, r3
 80021ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80021f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80021f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	1891      	adds	r1, r2, r2
 8002202:	63b9      	str	r1, [r7, #56]	; 0x38
 8002204:	415b      	adcs	r3, r3
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800220c:	4641      	mov	r1, r8
 800220e:	1851      	adds	r1, r2, r1
 8002210:	6339      	str	r1, [r7, #48]	; 0x30
 8002212:	4649      	mov	r1, r9
 8002214:	414b      	adcs	r3, r1
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002224:	4659      	mov	r1, fp
 8002226:	00cb      	lsls	r3, r1, #3
 8002228:	4651      	mov	r1, sl
 800222a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800222e:	4651      	mov	r1, sl
 8002230:	00ca      	lsls	r2, r1, #3
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	4603      	mov	r3, r0
 8002238:	4642      	mov	r2, r8
 800223a:	189b      	adds	r3, r3, r2
 800223c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002240:	464b      	mov	r3, r9
 8002242:	460a      	mov	r2, r1
 8002244:	eb42 0303 	adc.w	r3, r2, r3
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800224c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002258:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800225c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002260:	460b      	mov	r3, r1
 8002262:	18db      	adds	r3, r3, r3
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
 8002266:	4613      	mov	r3, r2
 8002268:	eb42 0303 	adc.w	r3, r2, r3
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002272:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002276:	f7fe f81b 	bl	80002b0 <__aeabi_uldivmod>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <UART_SetConfig+0x2d4>)
 8002280:	fba3 1302 	umull	r1, r3, r3, r2
 8002284:	095b      	lsrs	r3, r3, #5
 8002286:	2164      	movs	r1, #100	; 0x64
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	3332      	adds	r3, #50	; 0x32
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <UART_SetConfig+0x2d4>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	f003 0207 	and.w	r2, r3, #7
 800229e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4422      	add	r2, r4
 80022a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022a8:	e105      	b.n	80024b6 <UART_SetConfig+0x4d6>
 80022aa:	bf00      	nop
 80022ac:	40011000 	.word	0x40011000
 80022b0:	40011400 	.word	0x40011400
 80022b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022bc:	2200      	movs	r2, #0
 80022be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80022c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80022c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80022ca:	4642      	mov	r2, r8
 80022cc:	464b      	mov	r3, r9
 80022ce:	1891      	adds	r1, r2, r2
 80022d0:	6239      	str	r1, [r7, #32]
 80022d2:	415b      	adcs	r3, r3
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022da:	4641      	mov	r1, r8
 80022dc:	1854      	adds	r4, r2, r1
 80022de:	4649      	mov	r1, r9
 80022e0:	eb43 0501 	adc.w	r5, r3, r1
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	00eb      	lsls	r3, r5, #3
 80022ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022f2:	00e2      	lsls	r2, r4, #3
 80022f4:	4614      	mov	r4, r2
 80022f6:	461d      	mov	r5, r3
 80022f8:	4643      	mov	r3, r8
 80022fa:	18e3      	adds	r3, r4, r3
 80022fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002300:	464b      	mov	r3, r9
 8002302:	eb45 0303 	adc.w	r3, r5, r3
 8002306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800230a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002316:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002326:	4629      	mov	r1, r5
 8002328:	008b      	lsls	r3, r1, #2
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002330:	4621      	mov	r1, r4
 8002332:	008a      	lsls	r2, r1, #2
 8002334:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002338:	f7fd ffba 	bl	80002b0 <__aeabi_uldivmod>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <UART_SetConfig+0x4e4>)
 8002342:	fba3 2302 	umull	r2, r3, r3, r2
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	011c      	lsls	r4, r3, #4
 800234a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800234e:	2200      	movs	r2, #0
 8002350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002354:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002358:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800235c:	4642      	mov	r2, r8
 800235e:	464b      	mov	r3, r9
 8002360:	1891      	adds	r1, r2, r2
 8002362:	61b9      	str	r1, [r7, #24]
 8002364:	415b      	adcs	r3, r3
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800236c:	4641      	mov	r1, r8
 800236e:	1851      	adds	r1, r2, r1
 8002370:	6139      	str	r1, [r7, #16]
 8002372:	4649      	mov	r1, r9
 8002374:	414b      	adcs	r3, r1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002384:	4659      	mov	r1, fp
 8002386:	00cb      	lsls	r3, r1, #3
 8002388:	4651      	mov	r1, sl
 800238a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800238e:	4651      	mov	r1, sl
 8002390:	00ca      	lsls	r2, r1, #3
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	4603      	mov	r3, r0
 8002398:	4642      	mov	r2, r8
 800239a:	189b      	adds	r3, r3, r2
 800239c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80023a0:	464b      	mov	r3, r9
 80023a2:	460a      	mov	r2, r1
 80023a4:	eb42 0303 	adc.w	r3, r2, r3
 80023a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80023ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80023b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80023c4:	4649      	mov	r1, r9
 80023c6:	008b      	lsls	r3, r1, #2
 80023c8:	4641      	mov	r1, r8
 80023ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023ce:	4641      	mov	r1, r8
 80023d0:	008a      	lsls	r2, r1, #2
 80023d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80023d6:	f7fd ff6b 	bl	80002b0 <__aeabi_uldivmod>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <UART_SetConfig+0x4e4>)
 80023e0:	fba3 1302 	umull	r1, r3, r3, r2
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	2164      	movs	r1, #100	; 0x64
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	3332      	adds	r3, #50	; 0x32
 80023f2:	4a34      	ldr	r2, [pc, #208]	; (80024c4 <UART_SetConfig+0x4e4>)
 80023f4:	fba2 2303 	umull	r2, r3, r2, r3
 80023f8:	095b      	lsrs	r3, r3, #5
 80023fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fe:	441c      	add	r4, r3
 8002400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002404:	2200      	movs	r2, #0
 8002406:	673b      	str	r3, [r7, #112]	; 0x70
 8002408:	677a      	str	r2, [r7, #116]	; 0x74
 800240a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800240e:	4642      	mov	r2, r8
 8002410:	464b      	mov	r3, r9
 8002412:	1891      	adds	r1, r2, r2
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	415b      	adcs	r3, r3
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800241e:	4641      	mov	r1, r8
 8002420:	1851      	adds	r1, r2, r1
 8002422:	6039      	str	r1, [r7, #0]
 8002424:	4649      	mov	r1, r9
 8002426:	414b      	adcs	r3, r1
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002436:	4659      	mov	r1, fp
 8002438:	00cb      	lsls	r3, r1, #3
 800243a:	4651      	mov	r1, sl
 800243c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002440:	4651      	mov	r1, sl
 8002442:	00ca      	lsls	r2, r1, #3
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	4603      	mov	r3, r0
 800244a:	4642      	mov	r2, r8
 800244c:	189b      	adds	r3, r3, r2
 800244e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002450:	464b      	mov	r3, r9
 8002452:	460a      	mov	r2, r1
 8002454:	eb42 0303 	adc.w	r3, r2, r3
 8002458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	663b      	str	r3, [r7, #96]	; 0x60
 8002464:	667a      	str	r2, [r7, #100]	; 0x64
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002472:	4649      	mov	r1, r9
 8002474:	008b      	lsls	r3, r1, #2
 8002476:	4641      	mov	r1, r8
 8002478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800247c:	4641      	mov	r1, r8
 800247e:	008a      	lsls	r2, r1, #2
 8002480:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002484:	f7fd ff14 	bl	80002b0 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <UART_SetConfig+0x4e4>)
 800248e:	fba3 1302 	umull	r1, r3, r3, r2
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2164      	movs	r1, #100	; 0x64
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	3332      	adds	r3, #50	; 0x32
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <UART_SetConfig+0x4e4>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4422      	add	r2, r4
 80024b4:	609a      	str	r2, [r3, #8]
}
 80024b6:	bf00      	nop
 80024b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024c2:	bf00      	nop
 80024c4:	51eb851f 	.word	0x51eb851f

080024c8 <__errno>:
 80024c8:	4b01      	ldr	r3, [pc, #4]	; (80024d0 <__errno+0x8>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000018 	.word	0x20000018

080024d4 <__libc_init_array>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	4d0d      	ldr	r5, [pc, #52]	; (800250c <__libc_init_array+0x38>)
 80024d8:	4c0d      	ldr	r4, [pc, #52]	; (8002510 <__libc_init_array+0x3c>)
 80024da:	1b64      	subs	r4, r4, r5
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	2600      	movs	r6, #0
 80024e0:	42a6      	cmp	r6, r4
 80024e2:	d109      	bne.n	80024f8 <__libc_init_array+0x24>
 80024e4:	4d0b      	ldr	r5, [pc, #44]	; (8002514 <__libc_init_array+0x40>)
 80024e6:	4c0c      	ldr	r4, [pc, #48]	; (8002518 <__libc_init_array+0x44>)
 80024e8:	f000 ffae 	bl	8003448 <_init>
 80024ec:	1b64      	subs	r4, r4, r5
 80024ee:	10a4      	asrs	r4, r4, #2
 80024f0:	2600      	movs	r6, #0
 80024f2:	42a6      	cmp	r6, r4
 80024f4:	d105      	bne.n	8002502 <__libc_init_array+0x2e>
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fc:	4798      	blx	r3
 80024fe:	3601      	adds	r6, #1
 8002500:	e7ee      	b.n	80024e0 <__libc_init_array+0xc>
 8002502:	f855 3b04 	ldr.w	r3, [r5], #4
 8002506:	4798      	blx	r3
 8002508:	3601      	adds	r6, #1
 800250a:	e7f2      	b.n	80024f2 <__libc_init_array+0x1e>
 800250c:	08003564 	.word	0x08003564
 8002510:	08003564 	.word	0x08003564
 8002514:	08003564 	.word	0x08003564
 8002518:	08003568 	.word	0x08003568

0800251c <memset>:
 800251c:	4402      	add	r2, r0
 800251e:	4603      	mov	r3, r0
 8002520:	4293      	cmp	r3, r2
 8002522:	d100      	bne.n	8002526 <memset+0xa>
 8002524:	4770      	bx	lr
 8002526:	f803 1b01 	strb.w	r1, [r3], #1
 800252a:	e7f9      	b.n	8002520 <memset+0x4>

0800252c <iprintf>:
 800252c:	b40f      	push	{r0, r1, r2, r3}
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <iprintf+0x2c>)
 8002530:	b513      	push	{r0, r1, r4, lr}
 8002532:	681c      	ldr	r4, [r3, #0]
 8002534:	b124      	cbz	r4, 8002540 <iprintf+0x14>
 8002536:	69a3      	ldr	r3, [r4, #24]
 8002538:	b913      	cbnz	r3, 8002540 <iprintf+0x14>
 800253a:	4620      	mov	r0, r4
 800253c:	f000 f866 	bl	800260c <__sinit>
 8002540:	ab05      	add	r3, sp, #20
 8002542:	9a04      	ldr	r2, [sp, #16]
 8002544:	68a1      	ldr	r1, [r4, #8]
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	4620      	mov	r0, r4
 800254a:	f000 f9bd 	bl	80028c8 <_vfiprintf_r>
 800254e:	b002      	add	sp, #8
 8002550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002554:	b004      	add	sp, #16
 8002556:	4770      	bx	lr
 8002558:	20000018 	.word	0x20000018

0800255c <std>:
 800255c:	2300      	movs	r3, #0
 800255e:	b510      	push	{r4, lr}
 8002560:	4604      	mov	r4, r0
 8002562:	e9c0 3300 	strd	r3, r3, [r0]
 8002566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800256a:	6083      	str	r3, [r0, #8]
 800256c:	8181      	strh	r1, [r0, #12]
 800256e:	6643      	str	r3, [r0, #100]	; 0x64
 8002570:	81c2      	strh	r2, [r0, #14]
 8002572:	6183      	str	r3, [r0, #24]
 8002574:	4619      	mov	r1, r3
 8002576:	2208      	movs	r2, #8
 8002578:	305c      	adds	r0, #92	; 0x5c
 800257a:	f7ff ffcf 	bl	800251c <memset>
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <std+0x38>)
 8002580:	6263      	str	r3, [r4, #36]	; 0x24
 8002582:	4b05      	ldr	r3, [pc, #20]	; (8002598 <std+0x3c>)
 8002584:	62a3      	str	r3, [r4, #40]	; 0x28
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <std+0x40>)
 8002588:	62e3      	str	r3, [r4, #44]	; 0x2c
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <std+0x44>)
 800258c:	6224      	str	r4, [r4, #32]
 800258e:	6323      	str	r3, [r4, #48]	; 0x30
 8002590:	bd10      	pop	{r4, pc}
 8002592:	bf00      	nop
 8002594:	08002e71 	.word	0x08002e71
 8002598:	08002e93 	.word	0x08002e93
 800259c:	08002ecb 	.word	0x08002ecb
 80025a0:	08002eef 	.word	0x08002eef

080025a4 <_cleanup_r>:
 80025a4:	4901      	ldr	r1, [pc, #4]	; (80025ac <_cleanup_r+0x8>)
 80025a6:	f000 b8af 	b.w	8002708 <_fwalk_reent>
 80025aa:	bf00      	nop
 80025ac:	080031c9 	.word	0x080031c9

080025b0 <__sfmoreglue>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	2268      	movs	r2, #104	; 0x68
 80025b4:	1e4d      	subs	r5, r1, #1
 80025b6:	4355      	muls	r5, r2
 80025b8:	460e      	mov	r6, r1
 80025ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80025be:	f000 f8e5 	bl	800278c <_malloc_r>
 80025c2:	4604      	mov	r4, r0
 80025c4:	b140      	cbz	r0, 80025d8 <__sfmoreglue+0x28>
 80025c6:	2100      	movs	r1, #0
 80025c8:	e9c0 1600 	strd	r1, r6, [r0]
 80025cc:	300c      	adds	r0, #12
 80025ce:	60a0      	str	r0, [r4, #8]
 80025d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80025d4:	f7ff ffa2 	bl	800251c <memset>
 80025d8:	4620      	mov	r0, r4
 80025da:	bd70      	pop	{r4, r5, r6, pc}

080025dc <__sfp_lock_acquire>:
 80025dc:	4801      	ldr	r0, [pc, #4]	; (80025e4 <__sfp_lock_acquire+0x8>)
 80025de:	f000 b8b3 	b.w	8002748 <__retarget_lock_acquire_recursive>
 80025e2:	bf00      	nop
 80025e4:	200000e9 	.word	0x200000e9

080025e8 <__sfp_lock_release>:
 80025e8:	4801      	ldr	r0, [pc, #4]	; (80025f0 <__sfp_lock_release+0x8>)
 80025ea:	f000 b8ae 	b.w	800274a <__retarget_lock_release_recursive>
 80025ee:	bf00      	nop
 80025f0:	200000e9 	.word	0x200000e9

080025f4 <__sinit_lock_acquire>:
 80025f4:	4801      	ldr	r0, [pc, #4]	; (80025fc <__sinit_lock_acquire+0x8>)
 80025f6:	f000 b8a7 	b.w	8002748 <__retarget_lock_acquire_recursive>
 80025fa:	bf00      	nop
 80025fc:	200000ea 	.word	0x200000ea

08002600 <__sinit_lock_release>:
 8002600:	4801      	ldr	r0, [pc, #4]	; (8002608 <__sinit_lock_release+0x8>)
 8002602:	f000 b8a2 	b.w	800274a <__retarget_lock_release_recursive>
 8002606:	bf00      	nop
 8002608:	200000ea 	.word	0x200000ea

0800260c <__sinit>:
 800260c:	b510      	push	{r4, lr}
 800260e:	4604      	mov	r4, r0
 8002610:	f7ff fff0 	bl	80025f4 <__sinit_lock_acquire>
 8002614:	69a3      	ldr	r3, [r4, #24]
 8002616:	b11b      	cbz	r3, 8002620 <__sinit+0x14>
 8002618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800261c:	f7ff bff0 	b.w	8002600 <__sinit_lock_release>
 8002620:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002624:	6523      	str	r3, [r4, #80]	; 0x50
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <__sinit+0x68>)
 8002628:	4a13      	ldr	r2, [pc, #76]	; (8002678 <__sinit+0x6c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	62a2      	str	r2, [r4, #40]	; 0x28
 800262e:	42a3      	cmp	r3, r4
 8002630:	bf04      	itt	eq
 8002632:	2301      	moveq	r3, #1
 8002634:	61a3      	streq	r3, [r4, #24]
 8002636:	4620      	mov	r0, r4
 8002638:	f000 f820 	bl	800267c <__sfp>
 800263c:	6060      	str	r0, [r4, #4]
 800263e:	4620      	mov	r0, r4
 8002640:	f000 f81c 	bl	800267c <__sfp>
 8002644:	60a0      	str	r0, [r4, #8]
 8002646:	4620      	mov	r0, r4
 8002648:	f000 f818 	bl	800267c <__sfp>
 800264c:	2200      	movs	r2, #0
 800264e:	60e0      	str	r0, [r4, #12]
 8002650:	2104      	movs	r1, #4
 8002652:	6860      	ldr	r0, [r4, #4]
 8002654:	f7ff ff82 	bl	800255c <std>
 8002658:	68a0      	ldr	r0, [r4, #8]
 800265a:	2201      	movs	r2, #1
 800265c:	2109      	movs	r1, #9
 800265e:	f7ff ff7d 	bl	800255c <std>
 8002662:	68e0      	ldr	r0, [r4, #12]
 8002664:	2202      	movs	r2, #2
 8002666:	2112      	movs	r1, #18
 8002668:	f7ff ff78 	bl	800255c <std>
 800266c:	2301      	movs	r3, #1
 800266e:	61a3      	str	r3, [r4, #24]
 8002670:	e7d2      	b.n	8002618 <__sinit+0xc>
 8002672:	bf00      	nop
 8002674:	080034c4 	.word	0x080034c4
 8002678:	080025a5 	.word	0x080025a5

0800267c <__sfp>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	4607      	mov	r7, r0
 8002680:	f7ff ffac 	bl	80025dc <__sfp_lock_acquire>
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <__sfp+0x84>)
 8002686:	681e      	ldr	r6, [r3, #0]
 8002688:	69b3      	ldr	r3, [r6, #24]
 800268a:	b913      	cbnz	r3, 8002692 <__sfp+0x16>
 800268c:	4630      	mov	r0, r6
 800268e:	f7ff ffbd 	bl	800260c <__sinit>
 8002692:	3648      	adds	r6, #72	; 0x48
 8002694:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002698:	3b01      	subs	r3, #1
 800269a:	d503      	bpl.n	80026a4 <__sfp+0x28>
 800269c:	6833      	ldr	r3, [r6, #0]
 800269e:	b30b      	cbz	r3, 80026e4 <__sfp+0x68>
 80026a0:	6836      	ldr	r6, [r6, #0]
 80026a2:	e7f7      	b.n	8002694 <__sfp+0x18>
 80026a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80026a8:	b9d5      	cbnz	r5, 80026e0 <__sfp+0x64>
 80026aa:	4b16      	ldr	r3, [pc, #88]	; (8002704 <__sfp+0x88>)
 80026ac:	60e3      	str	r3, [r4, #12]
 80026ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026b2:	6665      	str	r5, [r4, #100]	; 0x64
 80026b4:	f000 f847 	bl	8002746 <__retarget_lock_init_recursive>
 80026b8:	f7ff ff96 	bl	80025e8 <__sfp_lock_release>
 80026bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80026c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80026c4:	6025      	str	r5, [r4, #0]
 80026c6:	61a5      	str	r5, [r4, #24]
 80026c8:	2208      	movs	r2, #8
 80026ca:	4629      	mov	r1, r5
 80026cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80026d0:	f7ff ff24 	bl	800251c <memset>
 80026d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80026d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80026dc:	4620      	mov	r0, r4
 80026de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e0:	3468      	adds	r4, #104	; 0x68
 80026e2:	e7d9      	b.n	8002698 <__sfp+0x1c>
 80026e4:	2104      	movs	r1, #4
 80026e6:	4638      	mov	r0, r7
 80026e8:	f7ff ff62 	bl	80025b0 <__sfmoreglue>
 80026ec:	4604      	mov	r4, r0
 80026ee:	6030      	str	r0, [r6, #0]
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d1d5      	bne.n	80026a0 <__sfp+0x24>
 80026f4:	f7ff ff78 	bl	80025e8 <__sfp_lock_release>
 80026f8:	230c      	movs	r3, #12
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	e7ee      	b.n	80026dc <__sfp+0x60>
 80026fe:	bf00      	nop
 8002700:	080034c4 	.word	0x080034c4
 8002704:	ffff0001 	.word	0xffff0001

08002708 <_fwalk_reent>:
 8002708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800270c:	4606      	mov	r6, r0
 800270e:	4688      	mov	r8, r1
 8002710:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002714:	2700      	movs	r7, #0
 8002716:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800271a:	f1b9 0901 	subs.w	r9, r9, #1
 800271e:	d505      	bpl.n	800272c <_fwalk_reent+0x24>
 8002720:	6824      	ldr	r4, [r4, #0]
 8002722:	2c00      	cmp	r4, #0
 8002724:	d1f7      	bne.n	8002716 <_fwalk_reent+0xe>
 8002726:	4638      	mov	r0, r7
 8002728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800272c:	89ab      	ldrh	r3, [r5, #12]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d907      	bls.n	8002742 <_fwalk_reent+0x3a>
 8002732:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002736:	3301      	adds	r3, #1
 8002738:	d003      	beq.n	8002742 <_fwalk_reent+0x3a>
 800273a:	4629      	mov	r1, r5
 800273c:	4630      	mov	r0, r6
 800273e:	47c0      	blx	r8
 8002740:	4307      	orrs	r7, r0
 8002742:	3568      	adds	r5, #104	; 0x68
 8002744:	e7e9      	b.n	800271a <_fwalk_reent+0x12>

08002746 <__retarget_lock_init_recursive>:
 8002746:	4770      	bx	lr

08002748 <__retarget_lock_acquire_recursive>:
 8002748:	4770      	bx	lr

0800274a <__retarget_lock_release_recursive>:
 800274a:	4770      	bx	lr

0800274c <sbrk_aligned>:
 800274c:	b570      	push	{r4, r5, r6, lr}
 800274e:	4e0e      	ldr	r6, [pc, #56]	; (8002788 <sbrk_aligned+0x3c>)
 8002750:	460c      	mov	r4, r1
 8002752:	6831      	ldr	r1, [r6, #0]
 8002754:	4605      	mov	r5, r0
 8002756:	b911      	cbnz	r1, 800275e <sbrk_aligned+0x12>
 8002758:	f000 fb7a 	bl	8002e50 <_sbrk_r>
 800275c:	6030      	str	r0, [r6, #0]
 800275e:	4621      	mov	r1, r4
 8002760:	4628      	mov	r0, r5
 8002762:	f000 fb75 	bl	8002e50 <_sbrk_r>
 8002766:	1c43      	adds	r3, r0, #1
 8002768:	d00a      	beq.n	8002780 <sbrk_aligned+0x34>
 800276a:	1cc4      	adds	r4, r0, #3
 800276c:	f024 0403 	bic.w	r4, r4, #3
 8002770:	42a0      	cmp	r0, r4
 8002772:	d007      	beq.n	8002784 <sbrk_aligned+0x38>
 8002774:	1a21      	subs	r1, r4, r0
 8002776:	4628      	mov	r0, r5
 8002778:	f000 fb6a 	bl	8002e50 <_sbrk_r>
 800277c:	3001      	adds	r0, #1
 800277e:	d101      	bne.n	8002784 <sbrk_aligned+0x38>
 8002780:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002784:	4620      	mov	r0, r4
 8002786:	bd70      	pop	{r4, r5, r6, pc}
 8002788:	200000f0 	.word	0x200000f0

0800278c <_malloc_r>:
 800278c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002790:	1ccd      	adds	r5, r1, #3
 8002792:	f025 0503 	bic.w	r5, r5, #3
 8002796:	3508      	adds	r5, #8
 8002798:	2d0c      	cmp	r5, #12
 800279a:	bf38      	it	cc
 800279c:	250c      	movcc	r5, #12
 800279e:	2d00      	cmp	r5, #0
 80027a0:	4607      	mov	r7, r0
 80027a2:	db01      	blt.n	80027a8 <_malloc_r+0x1c>
 80027a4:	42a9      	cmp	r1, r5
 80027a6:	d905      	bls.n	80027b4 <_malloc_r+0x28>
 80027a8:	230c      	movs	r3, #12
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	2600      	movs	r6, #0
 80027ae:	4630      	mov	r0, r6
 80027b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027b4:	4e2e      	ldr	r6, [pc, #184]	; (8002870 <_malloc_r+0xe4>)
 80027b6:	f000 fdbb 	bl	8003330 <__malloc_lock>
 80027ba:	6833      	ldr	r3, [r6, #0]
 80027bc:	461c      	mov	r4, r3
 80027be:	bb34      	cbnz	r4, 800280e <_malloc_r+0x82>
 80027c0:	4629      	mov	r1, r5
 80027c2:	4638      	mov	r0, r7
 80027c4:	f7ff ffc2 	bl	800274c <sbrk_aligned>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	4604      	mov	r4, r0
 80027cc:	d14d      	bne.n	800286a <_malloc_r+0xde>
 80027ce:	6834      	ldr	r4, [r6, #0]
 80027d0:	4626      	mov	r6, r4
 80027d2:	2e00      	cmp	r6, #0
 80027d4:	d140      	bne.n	8002858 <_malloc_r+0xcc>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	4631      	mov	r1, r6
 80027da:	4638      	mov	r0, r7
 80027dc:	eb04 0803 	add.w	r8, r4, r3
 80027e0:	f000 fb36 	bl	8002e50 <_sbrk_r>
 80027e4:	4580      	cmp	r8, r0
 80027e6:	d13a      	bne.n	800285e <_malloc_r+0xd2>
 80027e8:	6821      	ldr	r1, [r4, #0]
 80027ea:	3503      	adds	r5, #3
 80027ec:	1a6d      	subs	r5, r5, r1
 80027ee:	f025 0503 	bic.w	r5, r5, #3
 80027f2:	3508      	adds	r5, #8
 80027f4:	2d0c      	cmp	r5, #12
 80027f6:	bf38      	it	cc
 80027f8:	250c      	movcc	r5, #12
 80027fa:	4629      	mov	r1, r5
 80027fc:	4638      	mov	r0, r7
 80027fe:	f7ff ffa5 	bl	800274c <sbrk_aligned>
 8002802:	3001      	adds	r0, #1
 8002804:	d02b      	beq.n	800285e <_malloc_r+0xd2>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	442b      	add	r3, r5
 800280a:	6023      	str	r3, [r4, #0]
 800280c:	e00e      	b.n	800282c <_malloc_r+0xa0>
 800280e:	6822      	ldr	r2, [r4, #0]
 8002810:	1b52      	subs	r2, r2, r5
 8002812:	d41e      	bmi.n	8002852 <_malloc_r+0xc6>
 8002814:	2a0b      	cmp	r2, #11
 8002816:	d916      	bls.n	8002846 <_malloc_r+0xba>
 8002818:	1961      	adds	r1, r4, r5
 800281a:	42a3      	cmp	r3, r4
 800281c:	6025      	str	r5, [r4, #0]
 800281e:	bf18      	it	ne
 8002820:	6059      	strne	r1, [r3, #4]
 8002822:	6863      	ldr	r3, [r4, #4]
 8002824:	bf08      	it	eq
 8002826:	6031      	streq	r1, [r6, #0]
 8002828:	5162      	str	r2, [r4, r5]
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	4638      	mov	r0, r7
 800282e:	f104 060b 	add.w	r6, r4, #11
 8002832:	f000 fd83 	bl	800333c <__malloc_unlock>
 8002836:	f026 0607 	bic.w	r6, r6, #7
 800283a:	1d23      	adds	r3, r4, #4
 800283c:	1af2      	subs	r2, r6, r3
 800283e:	d0b6      	beq.n	80027ae <_malloc_r+0x22>
 8002840:	1b9b      	subs	r3, r3, r6
 8002842:	50a3      	str	r3, [r4, r2]
 8002844:	e7b3      	b.n	80027ae <_malloc_r+0x22>
 8002846:	6862      	ldr	r2, [r4, #4]
 8002848:	42a3      	cmp	r3, r4
 800284a:	bf0c      	ite	eq
 800284c:	6032      	streq	r2, [r6, #0]
 800284e:	605a      	strne	r2, [r3, #4]
 8002850:	e7ec      	b.n	800282c <_malloc_r+0xa0>
 8002852:	4623      	mov	r3, r4
 8002854:	6864      	ldr	r4, [r4, #4]
 8002856:	e7b2      	b.n	80027be <_malloc_r+0x32>
 8002858:	4634      	mov	r4, r6
 800285a:	6876      	ldr	r6, [r6, #4]
 800285c:	e7b9      	b.n	80027d2 <_malloc_r+0x46>
 800285e:	230c      	movs	r3, #12
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4638      	mov	r0, r7
 8002864:	f000 fd6a 	bl	800333c <__malloc_unlock>
 8002868:	e7a1      	b.n	80027ae <_malloc_r+0x22>
 800286a:	6025      	str	r5, [r4, #0]
 800286c:	e7de      	b.n	800282c <_malloc_r+0xa0>
 800286e:	bf00      	nop
 8002870:	200000ec 	.word	0x200000ec

08002874 <__sfputc_r>:
 8002874:	6893      	ldr	r3, [r2, #8]
 8002876:	3b01      	subs	r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	b410      	push	{r4}
 800287c:	6093      	str	r3, [r2, #8]
 800287e:	da08      	bge.n	8002892 <__sfputc_r+0x1e>
 8002880:	6994      	ldr	r4, [r2, #24]
 8002882:	42a3      	cmp	r3, r4
 8002884:	db01      	blt.n	800288a <__sfputc_r+0x16>
 8002886:	290a      	cmp	r1, #10
 8002888:	d103      	bne.n	8002892 <__sfputc_r+0x1e>
 800288a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800288e:	f000 bb33 	b.w	8002ef8 <__swbuf_r>
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	1c58      	adds	r0, r3, #1
 8002896:	6010      	str	r0, [r2, #0]
 8002898:	7019      	strb	r1, [r3, #0]
 800289a:	4608      	mov	r0, r1
 800289c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <__sfputs_r>:
 80028a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a4:	4606      	mov	r6, r0
 80028a6:	460f      	mov	r7, r1
 80028a8:	4614      	mov	r4, r2
 80028aa:	18d5      	adds	r5, r2, r3
 80028ac:	42ac      	cmp	r4, r5
 80028ae:	d101      	bne.n	80028b4 <__sfputs_r+0x12>
 80028b0:	2000      	movs	r0, #0
 80028b2:	e007      	b.n	80028c4 <__sfputs_r+0x22>
 80028b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028b8:	463a      	mov	r2, r7
 80028ba:	4630      	mov	r0, r6
 80028bc:	f7ff ffda 	bl	8002874 <__sfputc_r>
 80028c0:	1c43      	adds	r3, r0, #1
 80028c2:	d1f3      	bne.n	80028ac <__sfputs_r+0xa>
 80028c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028c8 <_vfiprintf_r>:
 80028c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028cc:	460d      	mov	r5, r1
 80028ce:	b09d      	sub	sp, #116	; 0x74
 80028d0:	4614      	mov	r4, r2
 80028d2:	4698      	mov	r8, r3
 80028d4:	4606      	mov	r6, r0
 80028d6:	b118      	cbz	r0, 80028e0 <_vfiprintf_r+0x18>
 80028d8:	6983      	ldr	r3, [r0, #24]
 80028da:	b90b      	cbnz	r3, 80028e0 <_vfiprintf_r+0x18>
 80028dc:	f7ff fe96 	bl	800260c <__sinit>
 80028e0:	4b89      	ldr	r3, [pc, #548]	; (8002b08 <_vfiprintf_r+0x240>)
 80028e2:	429d      	cmp	r5, r3
 80028e4:	d11b      	bne.n	800291e <_vfiprintf_r+0x56>
 80028e6:	6875      	ldr	r5, [r6, #4]
 80028e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80028ea:	07d9      	lsls	r1, r3, #31
 80028ec:	d405      	bmi.n	80028fa <_vfiprintf_r+0x32>
 80028ee:	89ab      	ldrh	r3, [r5, #12]
 80028f0:	059a      	lsls	r2, r3, #22
 80028f2:	d402      	bmi.n	80028fa <_vfiprintf_r+0x32>
 80028f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80028f6:	f7ff ff27 	bl	8002748 <__retarget_lock_acquire_recursive>
 80028fa:	89ab      	ldrh	r3, [r5, #12]
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	d501      	bpl.n	8002904 <_vfiprintf_r+0x3c>
 8002900:	692b      	ldr	r3, [r5, #16]
 8002902:	b9eb      	cbnz	r3, 8002940 <_vfiprintf_r+0x78>
 8002904:	4629      	mov	r1, r5
 8002906:	4630      	mov	r0, r6
 8002908:	f000 fb5a 	bl	8002fc0 <__swsetup_r>
 800290c:	b1c0      	cbz	r0, 8002940 <_vfiprintf_r+0x78>
 800290e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002910:	07dc      	lsls	r4, r3, #31
 8002912:	d50e      	bpl.n	8002932 <_vfiprintf_r+0x6a>
 8002914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002918:	b01d      	add	sp, #116	; 0x74
 800291a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <_vfiprintf_r+0x244>)
 8002920:	429d      	cmp	r5, r3
 8002922:	d101      	bne.n	8002928 <_vfiprintf_r+0x60>
 8002924:	68b5      	ldr	r5, [r6, #8]
 8002926:	e7df      	b.n	80028e8 <_vfiprintf_r+0x20>
 8002928:	4b79      	ldr	r3, [pc, #484]	; (8002b10 <_vfiprintf_r+0x248>)
 800292a:	429d      	cmp	r5, r3
 800292c:	bf08      	it	eq
 800292e:	68f5      	ldreq	r5, [r6, #12]
 8002930:	e7da      	b.n	80028e8 <_vfiprintf_r+0x20>
 8002932:	89ab      	ldrh	r3, [r5, #12]
 8002934:	0598      	lsls	r0, r3, #22
 8002936:	d4ed      	bmi.n	8002914 <_vfiprintf_r+0x4c>
 8002938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800293a:	f7ff ff06 	bl	800274a <__retarget_lock_release_recursive>
 800293e:	e7e9      	b.n	8002914 <_vfiprintf_r+0x4c>
 8002940:	2300      	movs	r3, #0
 8002942:	9309      	str	r3, [sp, #36]	; 0x24
 8002944:	2320      	movs	r3, #32
 8002946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800294a:	f8cd 800c 	str.w	r8, [sp, #12]
 800294e:	2330      	movs	r3, #48	; 0x30
 8002950:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b14 <_vfiprintf_r+0x24c>
 8002954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002958:	f04f 0901 	mov.w	r9, #1
 800295c:	4623      	mov	r3, r4
 800295e:	469a      	mov	sl, r3
 8002960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002964:	b10a      	cbz	r2, 800296a <_vfiprintf_r+0xa2>
 8002966:	2a25      	cmp	r2, #37	; 0x25
 8002968:	d1f9      	bne.n	800295e <_vfiprintf_r+0x96>
 800296a:	ebba 0b04 	subs.w	fp, sl, r4
 800296e:	d00b      	beq.n	8002988 <_vfiprintf_r+0xc0>
 8002970:	465b      	mov	r3, fp
 8002972:	4622      	mov	r2, r4
 8002974:	4629      	mov	r1, r5
 8002976:	4630      	mov	r0, r6
 8002978:	f7ff ff93 	bl	80028a2 <__sfputs_r>
 800297c:	3001      	adds	r0, #1
 800297e:	f000 80aa 	beq.w	8002ad6 <_vfiprintf_r+0x20e>
 8002982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002984:	445a      	add	r2, fp
 8002986:	9209      	str	r2, [sp, #36]	; 0x24
 8002988:	f89a 3000 	ldrb.w	r3, [sl]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80a2 	beq.w	8002ad6 <_vfiprintf_r+0x20e>
 8002992:	2300      	movs	r3, #0
 8002994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800299c:	f10a 0a01 	add.w	sl, sl, #1
 80029a0:	9304      	str	r3, [sp, #16]
 80029a2:	9307      	str	r3, [sp, #28]
 80029a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029a8:	931a      	str	r3, [sp, #104]	; 0x68
 80029aa:	4654      	mov	r4, sl
 80029ac:	2205      	movs	r2, #5
 80029ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b2:	4858      	ldr	r0, [pc, #352]	; (8002b14 <_vfiprintf_r+0x24c>)
 80029b4:	f7fd fc2c 	bl	8000210 <memchr>
 80029b8:	9a04      	ldr	r2, [sp, #16]
 80029ba:	b9d8      	cbnz	r0, 80029f4 <_vfiprintf_r+0x12c>
 80029bc:	06d1      	lsls	r1, r2, #27
 80029be:	bf44      	itt	mi
 80029c0:	2320      	movmi	r3, #32
 80029c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029c6:	0713      	lsls	r3, r2, #28
 80029c8:	bf44      	itt	mi
 80029ca:	232b      	movmi	r3, #43	; 0x2b
 80029cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029d0:	f89a 3000 	ldrb.w	r3, [sl]
 80029d4:	2b2a      	cmp	r3, #42	; 0x2a
 80029d6:	d015      	beq.n	8002a04 <_vfiprintf_r+0x13c>
 80029d8:	9a07      	ldr	r2, [sp, #28]
 80029da:	4654      	mov	r4, sl
 80029dc:	2000      	movs	r0, #0
 80029de:	f04f 0c0a 	mov.w	ip, #10
 80029e2:	4621      	mov	r1, r4
 80029e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80029e8:	3b30      	subs	r3, #48	; 0x30
 80029ea:	2b09      	cmp	r3, #9
 80029ec:	d94e      	bls.n	8002a8c <_vfiprintf_r+0x1c4>
 80029ee:	b1b0      	cbz	r0, 8002a1e <_vfiprintf_r+0x156>
 80029f0:	9207      	str	r2, [sp, #28]
 80029f2:	e014      	b.n	8002a1e <_vfiprintf_r+0x156>
 80029f4:	eba0 0308 	sub.w	r3, r0, r8
 80029f8:	fa09 f303 	lsl.w	r3, r9, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	9304      	str	r3, [sp, #16]
 8002a00:	46a2      	mov	sl, r4
 8002a02:	e7d2      	b.n	80029aa <_vfiprintf_r+0xe2>
 8002a04:	9b03      	ldr	r3, [sp, #12]
 8002a06:	1d19      	adds	r1, r3, #4
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	9103      	str	r1, [sp, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	bfbb      	ittet	lt
 8002a10:	425b      	neglt	r3, r3
 8002a12:	f042 0202 	orrlt.w	r2, r2, #2
 8002a16:	9307      	strge	r3, [sp, #28]
 8002a18:	9307      	strlt	r3, [sp, #28]
 8002a1a:	bfb8      	it	lt
 8002a1c:	9204      	strlt	r2, [sp, #16]
 8002a1e:	7823      	ldrb	r3, [r4, #0]
 8002a20:	2b2e      	cmp	r3, #46	; 0x2e
 8002a22:	d10c      	bne.n	8002a3e <_vfiprintf_r+0x176>
 8002a24:	7863      	ldrb	r3, [r4, #1]
 8002a26:	2b2a      	cmp	r3, #42	; 0x2a
 8002a28:	d135      	bne.n	8002a96 <_vfiprintf_r+0x1ce>
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	1d1a      	adds	r2, r3, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	9203      	str	r2, [sp, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bfb8      	it	lt
 8002a36:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002a3a:	3402      	adds	r4, #2
 8002a3c:	9305      	str	r3, [sp, #20]
 8002a3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b24 <_vfiprintf_r+0x25c>
 8002a42:	7821      	ldrb	r1, [r4, #0]
 8002a44:	2203      	movs	r2, #3
 8002a46:	4650      	mov	r0, sl
 8002a48:	f7fd fbe2 	bl	8000210 <memchr>
 8002a4c:	b140      	cbz	r0, 8002a60 <_vfiprintf_r+0x198>
 8002a4e:	2340      	movs	r3, #64	; 0x40
 8002a50:	eba0 000a 	sub.w	r0, r0, sl
 8002a54:	fa03 f000 	lsl.w	r0, r3, r0
 8002a58:	9b04      	ldr	r3, [sp, #16]
 8002a5a:	4303      	orrs	r3, r0
 8002a5c:	3401      	adds	r4, #1
 8002a5e:	9304      	str	r3, [sp, #16]
 8002a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a64:	482c      	ldr	r0, [pc, #176]	; (8002b18 <_vfiprintf_r+0x250>)
 8002a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a6a:	2206      	movs	r2, #6
 8002a6c:	f7fd fbd0 	bl	8000210 <memchr>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d03f      	beq.n	8002af4 <_vfiprintf_r+0x22c>
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <_vfiprintf_r+0x254>)
 8002a76:	bb1b      	cbnz	r3, 8002ac0 <_vfiprintf_r+0x1f8>
 8002a78:	9b03      	ldr	r3, [sp, #12]
 8002a7a:	3307      	adds	r3, #7
 8002a7c:	f023 0307 	bic.w	r3, r3, #7
 8002a80:	3308      	adds	r3, #8
 8002a82:	9303      	str	r3, [sp, #12]
 8002a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a86:	443b      	add	r3, r7
 8002a88:	9309      	str	r3, [sp, #36]	; 0x24
 8002a8a:	e767      	b.n	800295c <_vfiprintf_r+0x94>
 8002a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a90:	460c      	mov	r4, r1
 8002a92:	2001      	movs	r0, #1
 8002a94:	e7a5      	b.n	80029e2 <_vfiprintf_r+0x11a>
 8002a96:	2300      	movs	r3, #0
 8002a98:	3401      	adds	r4, #1
 8002a9a:	9305      	str	r3, [sp, #20]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f04f 0c0a 	mov.w	ip, #10
 8002aa2:	4620      	mov	r0, r4
 8002aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aa8:	3a30      	subs	r2, #48	; 0x30
 8002aaa:	2a09      	cmp	r2, #9
 8002aac:	d903      	bls.n	8002ab6 <_vfiprintf_r+0x1ee>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0c5      	beq.n	8002a3e <_vfiprintf_r+0x176>
 8002ab2:	9105      	str	r1, [sp, #20]
 8002ab4:	e7c3      	b.n	8002a3e <_vfiprintf_r+0x176>
 8002ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002aba:	4604      	mov	r4, r0
 8002abc:	2301      	movs	r3, #1
 8002abe:	e7f0      	b.n	8002aa2 <_vfiprintf_r+0x1da>
 8002ac0:	ab03      	add	r3, sp, #12
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	462a      	mov	r2, r5
 8002ac6:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <_vfiprintf_r+0x258>)
 8002ac8:	a904      	add	r1, sp, #16
 8002aca:	4630      	mov	r0, r6
 8002acc:	f3af 8000 	nop.w
 8002ad0:	4607      	mov	r7, r0
 8002ad2:	1c78      	adds	r0, r7, #1
 8002ad4:	d1d6      	bne.n	8002a84 <_vfiprintf_r+0x1bc>
 8002ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ad8:	07d9      	lsls	r1, r3, #31
 8002ada:	d405      	bmi.n	8002ae8 <_vfiprintf_r+0x220>
 8002adc:	89ab      	ldrh	r3, [r5, #12]
 8002ade:	059a      	lsls	r2, r3, #22
 8002ae0:	d402      	bmi.n	8002ae8 <_vfiprintf_r+0x220>
 8002ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ae4:	f7ff fe31 	bl	800274a <__retarget_lock_release_recursive>
 8002ae8:	89ab      	ldrh	r3, [r5, #12]
 8002aea:	065b      	lsls	r3, r3, #25
 8002aec:	f53f af12 	bmi.w	8002914 <_vfiprintf_r+0x4c>
 8002af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002af2:	e711      	b.n	8002918 <_vfiprintf_r+0x50>
 8002af4:	ab03      	add	r3, sp, #12
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	462a      	mov	r2, r5
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <_vfiprintf_r+0x258>)
 8002afc:	a904      	add	r1, sp, #16
 8002afe:	4630      	mov	r0, r6
 8002b00:	f000 f880 	bl	8002c04 <_printf_i>
 8002b04:	e7e4      	b.n	8002ad0 <_vfiprintf_r+0x208>
 8002b06:	bf00      	nop
 8002b08:	080034e8 	.word	0x080034e8
 8002b0c:	08003508 	.word	0x08003508
 8002b10:	080034c8 	.word	0x080034c8
 8002b14:	08003528 	.word	0x08003528
 8002b18:	08003532 	.word	0x08003532
 8002b1c:	00000000 	.word	0x00000000
 8002b20:	080028a3 	.word	0x080028a3
 8002b24:	0800352e 	.word	0x0800352e

08002b28 <_printf_common>:
 8002b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b2c:	4616      	mov	r6, r2
 8002b2e:	4699      	mov	r9, r3
 8002b30:	688a      	ldr	r2, [r1, #8]
 8002b32:	690b      	ldr	r3, [r1, #16]
 8002b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	bfb8      	it	lt
 8002b3c:	4613      	movlt	r3, r2
 8002b3e:	6033      	str	r3, [r6, #0]
 8002b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b44:	4607      	mov	r7, r0
 8002b46:	460c      	mov	r4, r1
 8002b48:	b10a      	cbz	r2, 8002b4e <_printf_common+0x26>
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	6033      	str	r3, [r6, #0]
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	0699      	lsls	r1, r3, #26
 8002b52:	bf42      	ittt	mi
 8002b54:	6833      	ldrmi	r3, [r6, #0]
 8002b56:	3302      	addmi	r3, #2
 8002b58:	6033      	strmi	r3, [r6, #0]
 8002b5a:	6825      	ldr	r5, [r4, #0]
 8002b5c:	f015 0506 	ands.w	r5, r5, #6
 8002b60:	d106      	bne.n	8002b70 <_printf_common+0x48>
 8002b62:	f104 0a19 	add.w	sl, r4, #25
 8002b66:	68e3      	ldr	r3, [r4, #12]
 8002b68:	6832      	ldr	r2, [r6, #0]
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	42ab      	cmp	r3, r5
 8002b6e:	dc26      	bgt.n	8002bbe <_printf_common+0x96>
 8002b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b74:	1e13      	subs	r3, r2, #0
 8002b76:	6822      	ldr	r2, [r4, #0]
 8002b78:	bf18      	it	ne
 8002b7a:	2301      	movne	r3, #1
 8002b7c:	0692      	lsls	r2, r2, #26
 8002b7e:	d42b      	bmi.n	8002bd8 <_printf_common+0xb0>
 8002b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b84:	4649      	mov	r1, r9
 8002b86:	4638      	mov	r0, r7
 8002b88:	47c0      	blx	r8
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	d01e      	beq.n	8002bcc <_printf_common+0xa4>
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	68e5      	ldr	r5, [r4, #12]
 8002b92:	6832      	ldr	r2, [r6, #0]
 8002b94:	f003 0306 	and.w	r3, r3, #6
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	bf08      	it	eq
 8002b9c:	1aad      	subeq	r5, r5, r2
 8002b9e:	68a3      	ldr	r3, [r4, #8]
 8002ba0:	6922      	ldr	r2, [r4, #16]
 8002ba2:	bf0c      	ite	eq
 8002ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ba8:	2500      	movne	r5, #0
 8002baa:	4293      	cmp	r3, r2
 8002bac:	bfc4      	itt	gt
 8002bae:	1a9b      	subgt	r3, r3, r2
 8002bb0:	18ed      	addgt	r5, r5, r3
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	341a      	adds	r4, #26
 8002bb6:	42b5      	cmp	r5, r6
 8002bb8:	d11a      	bne.n	8002bf0 <_printf_common+0xc8>
 8002bba:	2000      	movs	r0, #0
 8002bbc:	e008      	b.n	8002bd0 <_printf_common+0xa8>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	4652      	mov	r2, sl
 8002bc2:	4649      	mov	r1, r9
 8002bc4:	4638      	mov	r0, r7
 8002bc6:	47c0      	blx	r8
 8002bc8:	3001      	adds	r0, #1
 8002bca:	d103      	bne.n	8002bd4 <_printf_common+0xac>
 8002bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd4:	3501      	adds	r5, #1
 8002bd6:	e7c6      	b.n	8002b66 <_printf_common+0x3e>
 8002bd8:	18e1      	adds	r1, r4, r3
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	2030      	movs	r0, #48	; 0x30
 8002bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002be2:	4422      	add	r2, r4
 8002be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bec:	3302      	adds	r3, #2
 8002bee:	e7c7      	b.n	8002b80 <_printf_common+0x58>
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	4622      	mov	r2, r4
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	4638      	mov	r0, r7
 8002bf8:	47c0      	blx	r8
 8002bfa:	3001      	adds	r0, #1
 8002bfc:	d0e6      	beq.n	8002bcc <_printf_common+0xa4>
 8002bfe:	3601      	adds	r6, #1
 8002c00:	e7d9      	b.n	8002bb6 <_printf_common+0x8e>
	...

08002c04 <_printf_i>:
 8002c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c08:	7e0f      	ldrb	r7, [r1, #24]
 8002c0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c0c:	2f78      	cmp	r7, #120	; 0x78
 8002c0e:	4691      	mov	r9, r2
 8002c10:	4680      	mov	r8, r0
 8002c12:	460c      	mov	r4, r1
 8002c14:	469a      	mov	sl, r3
 8002c16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c1a:	d807      	bhi.n	8002c2c <_printf_i+0x28>
 8002c1c:	2f62      	cmp	r7, #98	; 0x62
 8002c1e:	d80a      	bhi.n	8002c36 <_printf_i+0x32>
 8002c20:	2f00      	cmp	r7, #0
 8002c22:	f000 80d8 	beq.w	8002dd6 <_printf_i+0x1d2>
 8002c26:	2f58      	cmp	r7, #88	; 0x58
 8002c28:	f000 80a3 	beq.w	8002d72 <_printf_i+0x16e>
 8002c2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c34:	e03a      	b.n	8002cac <_printf_i+0xa8>
 8002c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c3a:	2b15      	cmp	r3, #21
 8002c3c:	d8f6      	bhi.n	8002c2c <_printf_i+0x28>
 8002c3e:	a101      	add	r1, pc, #4	; (adr r1, 8002c44 <_printf_i+0x40>)
 8002c40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c44:	08002c9d 	.word	0x08002c9d
 8002c48:	08002cb1 	.word	0x08002cb1
 8002c4c:	08002c2d 	.word	0x08002c2d
 8002c50:	08002c2d 	.word	0x08002c2d
 8002c54:	08002c2d 	.word	0x08002c2d
 8002c58:	08002c2d 	.word	0x08002c2d
 8002c5c:	08002cb1 	.word	0x08002cb1
 8002c60:	08002c2d 	.word	0x08002c2d
 8002c64:	08002c2d 	.word	0x08002c2d
 8002c68:	08002c2d 	.word	0x08002c2d
 8002c6c:	08002c2d 	.word	0x08002c2d
 8002c70:	08002dbd 	.word	0x08002dbd
 8002c74:	08002ce1 	.word	0x08002ce1
 8002c78:	08002d9f 	.word	0x08002d9f
 8002c7c:	08002c2d 	.word	0x08002c2d
 8002c80:	08002c2d 	.word	0x08002c2d
 8002c84:	08002ddf 	.word	0x08002ddf
 8002c88:	08002c2d 	.word	0x08002c2d
 8002c8c:	08002ce1 	.word	0x08002ce1
 8002c90:	08002c2d 	.word	0x08002c2d
 8002c94:	08002c2d 	.word	0x08002c2d
 8002c98:	08002da7 	.word	0x08002da7
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	1d1a      	adds	r2, r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	602a      	str	r2, [r5, #0]
 8002ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0a3      	b.n	8002df8 <_printf_i+0x1f4>
 8002cb0:	6820      	ldr	r0, [r4, #0]
 8002cb2:	6829      	ldr	r1, [r5, #0]
 8002cb4:	0606      	lsls	r6, r0, #24
 8002cb6:	f101 0304 	add.w	r3, r1, #4
 8002cba:	d50a      	bpl.n	8002cd2 <_printf_i+0xce>
 8002cbc:	680e      	ldr	r6, [r1, #0]
 8002cbe:	602b      	str	r3, [r5, #0]
 8002cc0:	2e00      	cmp	r6, #0
 8002cc2:	da03      	bge.n	8002ccc <_printf_i+0xc8>
 8002cc4:	232d      	movs	r3, #45	; 0x2d
 8002cc6:	4276      	negs	r6, r6
 8002cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ccc:	485e      	ldr	r0, [pc, #376]	; (8002e48 <_printf_i+0x244>)
 8002cce:	230a      	movs	r3, #10
 8002cd0:	e019      	b.n	8002d06 <_printf_i+0x102>
 8002cd2:	680e      	ldr	r6, [r1, #0]
 8002cd4:	602b      	str	r3, [r5, #0]
 8002cd6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cda:	bf18      	it	ne
 8002cdc:	b236      	sxthne	r6, r6
 8002cde:	e7ef      	b.n	8002cc0 <_printf_i+0xbc>
 8002ce0:	682b      	ldr	r3, [r5, #0]
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	1d19      	adds	r1, r3, #4
 8002ce6:	6029      	str	r1, [r5, #0]
 8002ce8:	0601      	lsls	r1, r0, #24
 8002cea:	d501      	bpl.n	8002cf0 <_printf_i+0xec>
 8002cec:	681e      	ldr	r6, [r3, #0]
 8002cee:	e002      	b.n	8002cf6 <_printf_i+0xf2>
 8002cf0:	0646      	lsls	r6, r0, #25
 8002cf2:	d5fb      	bpl.n	8002cec <_printf_i+0xe8>
 8002cf4:	881e      	ldrh	r6, [r3, #0]
 8002cf6:	4854      	ldr	r0, [pc, #336]	; (8002e48 <_printf_i+0x244>)
 8002cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8002cfa:	bf0c      	ite	eq
 8002cfc:	2308      	moveq	r3, #8
 8002cfe:	230a      	movne	r3, #10
 8002d00:	2100      	movs	r1, #0
 8002d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d06:	6865      	ldr	r5, [r4, #4]
 8002d08:	60a5      	str	r5, [r4, #8]
 8002d0a:	2d00      	cmp	r5, #0
 8002d0c:	bfa2      	ittt	ge
 8002d0e:	6821      	ldrge	r1, [r4, #0]
 8002d10:	f021 0104 	bicge.w	r1, r1, #4
 8002d14:	6021      	strge	r1, [r4, #0]
 8002d16:	b90e      	cbnz	r6, 8002d1c <_printf_i+0x118>
 8002d18:	2d00      	cmp	r5, #0
 8002d1a:	d04d      	beq.n	8002db8 <_printf_i+0x1b4>
 8002d1c:	4615      	mov	r5, r2
 8002d1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d22:	fb03 6711 	mls	r7, r3, r1, r6
 8002d26:	5dc7      	ldrb	r7, [r0, r7]
 8002d28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d2c:	4637      	mov	r7, r6
 8002d2e:	42bb      	cmp	r3, r7
 8002d30:	460e      	mov	r6, r1
 8002d32:	d9f4      	bls.n	8002d1e <_printf_i+0x11a>
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d10b      	bne.n	8002d50 <_printf_i+0x14c>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	07de      	lsls	r6, r3, #31
 8002d3c:	d508      	bpl.n	8002d50 <_printf_i+0x14c>
 8002d3e:	6923      	ldr	r3, [r4, #16]
 8002d40:	6861      	ldr	r1, [r4, #4]
 8002d42:	4299      	cmp	r1, r3
 8002d44:	bfde      	ittt	le
 8002d46:	2330      	movle	r3, #48	; 0x30
 8002d48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002d50:	1b52      	subs	r2, r2, r5
 8002d52:	6122      	str	r2, [r4, #16]
 8002d54:	f8cd a000 	str.w	sl, [sp]
 8002d58:	464b      	mov	r3, r9
 8002d5a:	aa03      	add	r2, sp, #12
 8002d5c:	4621      	mov	r1, r4
 8002d5e:	4640      	mov	r0, r8
 8002d60:	f7ff fee2 	bl	8002b28 <_printf_common>
 8002d64:	3001      	adds	r0, #1
 8002d66:	d14c      	bne.n	8002e02 <_printf_i+0x1fe>
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d6c:	b004      	add	sp, #16
 8002d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d72:	4835      	ldr	r0, [pc, #212]	; (8002e48 <_printf_i+0x244>)
 8002d74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d78:	6829      	ldr	r1, [r5, #0]
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d80:	6029      	str	r1, [r5, #0]
 8002d82:	061d      	lsls	r5, r3, #24
 8002d84:	d514      	bpl.n	8002db0 <_printf_i+0x1ac>
 8002d86:	07df      	lsls	r7, r3, #31
 8002d88:	bf44      	itt	mi
 8002d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8002d8e:	6023      	strmi	r3, [r4, #0]
 8002d90:	b91e      	cbnz	r6, 8002d9a <_printf_i+0x196>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	f023 0320 	bic.w	r3, r3, #32
 8002d98:	6023      	str	r3, [r4, #0]
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	e7b0      	b.n	8002d00 <_printf_i+0xfc>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	f043 0320 	orr.w	r3, r3, #32
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	2378      	movs	r3, #120	; 0x78
 8002da8:	4828      	ldr	r0, [pc, #160]	; (8002e4c <_printf_i+0x248>)
 8002daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dae:	e7e3      	b.n	8002d78 <_printf_i+0x174>
 8002db0:	0659      	lsls	r1, r3, #25
 8002db2:	bf48      	it	mi
 8002db4:	b2b6      	uxthmi	r6, r6
 8002db6:	e7e6      	b.n	8002d86 <_printf_i+0x182>
 8002db8:	4615      	mov	r5, r2
 8002dba:	e7bb      	b.n	8002d34 <_printf_i+0x130>
 8002dbc:	682b      	ldr	r3, [r5, #0]
 8002dbe:	6826      	ldr	r6, [r4, #0]
 8002dc0:	6961      	ldr	r1, [r4, #20]
 8002dc2:	1d18      	adds	r0, r3, #4
 8002dc4:	6028      	str	r0, [r5, #0]
 8002dc6:	0635      	lsls	r5, r6, #24
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	d501      	bpl.n	8002dd0 <_printf_i+0x1cc>
 8002dcc:	6019      	str	r1, [r3, #0]
 8002dce:	e002      	b.n	8002dd6 <_printf_i+0x1d2>
 8002dd0:	0670      	lsls	r0, r6, #25
 8002dd2:	d5fb      	bpl.n	8002dcc <_printf_i+0x1c8>
 8002dd4:	8019      	strh	r1, [r3, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	6123      	str	r3, [r4, #16]
 8002dda:	4615      	mov	r5, r2
 8002ddc:	e7ba      	b.n	8002d54 <_printf_i+0x150>
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	1d1a      	adds	r2, r3, #4
 8002de2:	602a      	str	r2, [r5, #0]
 8002de4:	681d      	ldr	r5, [r3, #0]
 8002de6:	6862      	ldr	r2, [r4, #4]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4628      	mov	r0, r5
 8002dec:	f7fd fa10 	bl	8000210 <memchr>
 8002df0:	b108      	cbz	r0, 8002df6 <_printf_i+0x1f2>
 8002df2:	1b40      	subs	r0, r0, r5
 8002df4:	6060      	str	r0, [r4, #4]
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e00:	e7a8      	b.n	8002d54 <_printf_i+0x150>
 8002e02:	6923      	ldr	r3, [r4, #16]
 8002e04:	462a      	mov	r2, r5
 8002e06:	4649      	mov	r1, r9
 8002e08:	4640      	mov	r0, r8
 8002e0a:	47d0      	blx	sl
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d0ab      	beq.n	8002d68 <_printf_i+0x164>
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	079b      	lsls	r3, r3, #30
 8002e14:	d413      	bmi.n	8002e3e <_printf_i+0x23a>
 8002e16:	68e0      	ldr	r0, [r4, #12]
 8002e18:	9b03      	ldr	r3, [sp, #12]
 8002e1a:	4298      	cmp	r0, r3
 8002e1c:	bfb8      	it	lt
 8002e1e:	4618      	movlt	r0, r3
 8002e20:	e7a4      	b.n	8002d6c <_printf_i+0x168>
 8002e22:	2301      	movs	r3, #1
 8002e24:	4632      	mov	r2, r6
 8002e26:	4649      	mov	r1, r9
 8002e28:	4640      	mov	r0, r8
 8002e2a:	47d0      	blx	sl
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d09b      	beq.n	8002d68 <_printf_i+0x164>
 8002e30:	3501      	adds	r5, #1
 8002e32:	68e3      	ldr	r3, [r4, #12]
 8002e34:	9903      	ldr	r1, [sp, #12]
 8002e36:	1a5b      	subs	r3, r3, r1
 8002e38:	42ab      	cmp	r3, r5
 8002e3a:	dcf2      	bgt.n	8002e22 <_printf_i+0x21e>
 8002e3c:	e7eb      	b.n	8002e16 <_printf_i+0x212>
 8002e3e:	2500      	movs	r5, #0
 8002e40:	f104 0619 	add.w	r6, r4, #25
 8002e44:	e7f5      	b.n	8002e32 <_printf_i+0x22e>
 8002e46:	bf00      	nop
 8002e48:	08003539 	.word	0x08003539
 8002e4c:	0800354a 	.word	0x0800354a

08002e50 <_sbrk_r>:
 8002e50:	b538      	push	{r3, r4, r5, lr}
 8002e52:	4d06      	ldr	r5, [pc, #24]	; (8002e6c <_sbrk_r+0x1c>)
 8002e54:	2300      	movs	r3, #0
 8002e56:	4604      	mov	r4, r0
 8002e58:	4608      	mov	r0, r1
 8002e5a:	602b      	str	r3, [r5, #0]
 8002e5c:	f7fd feb6 	bl	8000bcc <_sbrk>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d102      	bne.n	8002e6a <_sbrk_r+0x1a>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	b103      	cbz	r3, 8002e6a <_sbrk_r+0x1a>
 8002e68:	6023      	str	r3, [r4, #0]
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	200000f4 	.word	0x200000f4

08002e70 <__sread>:
 8002e70:	b510      	push	{r4, lr}
 8002e72:	460c      	mov	r4, r1
 8002e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e78:	f000 fab2 	bl	80033e0 <_read_r>
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	bfab      	itete	ge
 8002e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e82:	89a3      	ldrhlt	r3, [r4, #12]
 8002e84:	181b      	addge	r3, r3, r0
 8002e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e8a:	bfac      	ite	ge
 8002e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e8e:	81a3      	strhlt	r3, [r4, #12]
 8002e90:	bd10      	pop	{r4, pc}

08002e92 <__swrite>:
 8002e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e96:	461f      	mov	r7, r3
 8002e98:	898b      	ldrh	r3, [r1, #12]
 8002e9a:	05db      	lsls	r3, r3, #23
 8002e9c:	4605      	mov	r5, r0
 8002e9e:	460c      	mov	r4, r1
 8002ea0:	4616      	mov	r6, r2
 8002ea2:	d505      	bpl.n	8002eb0 <__swrite+0x1e>
 8002ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f000 f9c8 	bl	8003240 <_lseek_r>
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eba:	81a3      	strh	r3, [r4, #12]
 8002ebc:	4632      	mov	r2, r6
 8002ebe:	463b      	mov	r3, r7
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec6:	f000 b869 	b.w	8002f9c <_write_r>

08002eca <__sseek>:
 8002eca:	b510      	push	{r4, lr}
 8002ecc:	460c      	mov	r4, r1
 8002ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed2:	f000 f9b5 	bl	8003240 <_lseek_r>
 8002ed6:	1c43      	adds	r3, r0, #1
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	bf15      	itete	ne
 8002edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ee6:	81a3      	strheq	r3, [r4, #12]
 8002ee8:	bf18      	it	ne
 8002eea:	81a3      	strhne	r3, [r4, #12]
 8002eec:	bd10      	pop	{r4, pc}

08002eee <__sclose>:
 8002eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef2:	f000 b8d3 	b.w	800309c <_close_r>
	...

08002ef8 <__swbuf_r>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	460e      	mov	r6, r1
 8002efc:	4614      	mov	r4, r2
 8002efe:	4605      	mov	r5, r0
 8002f00:	b118      	cbz	r0, 8002f0a <__swbuf_r+0x12>
 8002f02:	6983      	ldr	r3, [r0, #24]
 8002f04:	b90b      	cbnz	r3, 8002f0a <__swbuf_r+0x12>
 8002f06:	f7ff fb81 	bl	800260c <__sinit>
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <__swbuf_r+0x98>)
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	d12b      	bne.n	8002f68 <__swbuf_r+0x70>
 8002f10:	686c      	ldr	r4, [r5, #4]
 8002f12:	69a3      	ldr	r3, [r4, #24]
 8002f14:	60a3      	str	r3, [r4, #8]
 8002f16:	89a3      	ldrh	r3, [r4, #12]
 8002f18:	071a      	lsls	r2, r3, #28
 8002f1a:	d52f      	bpl.n	8002f7c <__swbuf_r+0x84>
 8002f1c:	6923      	ldr	r3, [r4, #16]
 8002f1e:	b36b      	cbz	r3, 8002f7c <__swbuf_r+0x84>
 8002f20:	6923      	ldr	r3, [r4, #16]
 8002f22:	6820      	ldr	r0, [r4, #0]
 8002f24:	1ac0      	subs	r0, r0, r3
 8002f26:	6963      	ldr	r3, [r4, #20]
 8002f28:	b2f6      	uxtb	r6, r6
 8002f2a:	4283      	cmp	r3, r0
 8002f2c:	4637      	mov	r7, r6
 8002f2e:	dc04      	bgt.n	8002f3a <__swbuf_r+0x42>
 8002f30:	4621      	mov	r1, r4
 8002f32:	4628      	mov	r0, r5
 8002f34:	f000 f948 	bl	80031c8 <_fflush_r>
 8002f38:	bb30      	cbnz	r0, 8002f88 <__swbuf_r+0x90>
 8002f3a:	68a3      	ldr	r3, [r4, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60a3      	str	r3, [r4, #8]
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	1c5a      	adds	r2, r3, #1
 8002f44:	6022      	str	r2, [r4, #0]
 8002f46:	701e      	strb	r6, [r3, #0]
 8002f48:	6963      	ldr	r3, [r4, #20]
 8002f4a:	3001      	adds	r0, #1
 8002f4c:	4283      	cmp	r3, r0
 8002f4e:	d004      	beq.n	8002f5a <__swbuf_r+0x62>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	07db      	lsls	r3, r3, #31
 8002f54:	d506      	bpl.n	8002f64 <__swbuf_r+0x6c>
 8002f56:	2e0a      	cmp	r6, #10
 8002f58:	d104      	bne.n	8002f64 <__swbuf_r+0x6c>
 8002f5a:	4621      	mov	r1, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f933 	bl	80031c8 <_fflush_r>
 8002f62:	b988      	cbnz	r0, 8002f88 <__swbuf_r+0x90>
 8002f64:	4638      	mov	r0, r7
 8002f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <__swbuf_r+0x9c>)
 8002f6a:	429c      	cmp	r4, r3
 8002f6c:	d101      	bne.n	8002f72 <__swbuf_r+0x7a>
 8002f6e:	68ac      	ldr	r4, [r5, #8]
 8002f70:	e7cf      	b.n	8002f12 <__swbuf_r+0x1a>
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <__swbuf_r+0xa0>)
 8002f74:	429c      	cmp	r4, r3
 8002f76:	bf08      	it	eq
 8002f78:	68ec      	ldreq	r4, [r5, #12]
 8002f7a:	e7ca      	b.n	8002f12 <__swbuf_r+0x1a>
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	4628      	mov	r0, r5
 8002f80:	f000 f81e 	bl	8002fc0 <__swsetup_r>
 8002f84:	2800      	cmp	r0, #0
 8002f86:	d0cb      	beq.n	8002f20 <__swbuf_r+0x28>
 8002f88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002f8c:	e7ea      	b.n	8002f64 <__swbuf_r+0x6c>
 8002f8e:	bf00      	nop
 8002f90:	080034e8 	.word	0x080034e8
 8002f94:	08003508 	.word	0x08003508
 8002f98:	080034c8 	.word	0x080034c8

08002f9c <_write_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4d07      	ldr	r5, [pc, #28]	; (8002fbc <_write_r+0x20>)
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4608      	mov	r0, r1
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	602a      	str	r2, [r5, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f7fd fb29 	bl	8000602 <_write>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_write_r+0x1e>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_write_r+0x1e>
 8002fb8:	6023      	str	r3, [r4, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200000f4 	.word	0x200000f4

08002fc0 <__swsetup_r>:
 8002fc0:	4b32      	ldr	r3, [pc, #200]	; (800308c <__swsetup_r+0xcc>)
 8002fc2:	b570      	push	{r4, r5, r6, lr}
 8002fc4:	681d      	ldr	r5, [r3, #0]
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	b125      	cbz	r5, 8002fd6 <__swsetup_r+0x16>
 8002fcc:	69ab      	ldr	r3, [r5, #24]
 8002fce:	b913      	cbnz	r3, 8002fd6 <__swsetup_r+0x16>
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f7ff fb1b 	bl	800260c <__sinit>
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <__swsetup_r+0xd0>)
 8002fd8:	429c      	cmp	r4, r3
 8002fda:	d10f      	bne.n	8002ffc <__swsetup_r+0x3c>
 8002fdc:	686c      	ldr	r4, [r5, #4]
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fe4:	0719      	lsls	r1, r3, #28
 8002fe6:	d42c      	bmi.n	8003042 <__swsetup_r+0x82>
 8002fe8:	06dd      	lsls	r5, r3, #27
 8002fea:	d411      	bmi.n	8003010 <__swsetup_r+0x50>
 8002fec:	2309      	movs	r3, #9
 8002fee:	6033      	str	r3, [r6, #0]
 8002ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffa:	e03e      	b.n	800307a <__swsetup_r+0xba>
 8002ffc:	4b25      	ldr	r3, [pc, #148]	; (8003094 <__swsetup_r+0xd4>)
 8002ffe:	429c      	cmp	r4, r3
 8003000:	d101      	bne.n	8003006 <__swsetup_r+0x46>
 8003002:	68ac      	ldr	r4, [r5, #8]
 8003004:	e7eb      	b.n	8002fde <__swsetup_r+0x1e>
 8003006:	4b24      	ldr	r3, [pc, #144]	; (8003098 <__swsetup_r+0xd8>)
 8003008:	429c      	cmp	r4, r3
 800300a:	bf08      	it	eq
 800300c:	68ec      	ldreq	r4, [r5, #12]
 800300e:	e7e6      	b.n	8002fde <__swsetup_r+0x1e>
 8003010:	0758      	lsls	r0, r3, #29
 8003012:	d512      	bpl.n	800303a <__swsetup_r+0x7a>
 8003014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003016:	b141      	cbz	r1, 800302a <__swsetup_r+0x6a>
 8003018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800301c:	4299      	cmp	r1, r3
 800301e:	d002      	beq.n	8003026 <__swsetup_r+0x66>
 8003020:	4630      	mov	r0, r6
 8003022:	f000 f991 	bl	8003348 <_free_r>
 8003026:	2300      	movs	r3, #0
 8003028:	6363      	str	r3, [r4, #52]	; 0x34
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	2300      	movs	r3, #0
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	6923      	ldr	r3, [r4, #16]
 8003038:	6023      	str	r3, [r4, #0]
 800303a:	89a3      	ldrh	r3, [r4, #12]
 800303c:	f043 0308 	orr.w	r3, r3, #8
 8003040:	81a3      	strh	r3, [r4, #12]
 8003042:	6923      	ldr	r3, [r4, #16]
 8003044:	b94b      	cbnz	r3, 800305a <__swsetup_r+0x9a>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800304c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003050:	d003      	beq.n	800305a <__swsetup_r+0x9a>
 8003052:	4621      	mov	r1, r4
 8003054:	4630      	mov	r0, r6
 8003056:	f000 f92b 	bl	80032b0 <__smakebuf_r>
 800305a:	89a0      	ldrh	r0, [r4, #12]
 800305c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003060:	f010 0301 	ands.w	r3, r0, #1
 8003064:	d00a      	beq.n	800307c <__swsetup_r+0xbc>
 8003066:	2300      	movs	r3, #0
 8003068:	60a3      	str	r3, [r4, #8]
 800306a:	6963      	ldr	r3, [r4, #20]
 800306c:	425b      	negs	r3, r3
 800306e:	61a3      	str	r3, [r4, #24]
 8003070:	6923      	ldr	r3, [r4, #16]
 8003072:	b943      	cbnz	r3, 8003086 <__swsetup_r+0xc6>
 8003074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003078:	d1ba      	bne.n	8002ff0 <__swsetup_r+0x30>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	0781      	lsls	r1, r0, #30
 800307e:	bf58      	it	pl
 8003080:	6963      	ldrpl	r3, [r4, #20]
 8003082:	60a3      	str	r3, [r4, #8]
 8003084:	e7f4      	b.n	8003070 <__swsetup_r+0xb0>
 8003086:	2000      	movs	r0, #0
 8003088:	e7f7      	b.n	800307a <__swsetup_r+0xba>
 800308a:	bf00      	nop
 800308c:	20000018 	.word	0x20000018
 8003090:	080034e8 	.word	0x080034e8
 8003094:	08003508 	.word	0x08003508
 8003098:	080034c8 	.word	0x080034c8

0800309c <_close_r>:
 800309c:	b538      	push	{r3, r4, r5, lr}
 800309e:	4d06      	ldr	r5, [pc, #24]	; (80030b8 <_close_r+0x1c>)
 80030a0:	2300      	movs	r3, #0
 80030a2:	4604      	mov	r4, r0
 80030a4:	4608      	mov	r0, r1
 80030a6:	602b      	str	r3, [r5, #0]
 80030a8:	f7fd fd5b 	bl	8000b62 <_close>
 80030ac:	1c43      	adds	r3, r0, #1
 80030ae:	d102      	bne.n	80030b6 <_close_r+0x1a>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	b103      	cbz	r3, 80030b6 <_close_r+0x1a>
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	bd38      	pop	{r3, r4, r5, pc}
 80030b8:	200000f4 	.word	0x200000f4

080030bc <__sflush_r>:
 80030bc:	898a      	ldrh	r2, [r1, #12]
 80030be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c2:	4605      	mov	r5, r0
 80030c4:	0710      	lsls	r0, r2, #28
 80030c6:	460c      	mov	r4, r1
 80030c8:	d458      	bmi.n	800317c <__sflush_r+0xc0>
 80030ca:	684b      	ldr	r3, [r1, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dc05      	bgt.n	80030dc <__sflush_r+0x20>
 80030d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	dc02      	bgt.n	80030dc <__sflush_r+0x20>
 80030d6:	2000      	movs	r0, #0
 80030d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030de:	2e00      	cmp	r6, #0
 80030e0:	d0f9      	beq.n	80030d6 <__sflush_r+0x1a>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030e8:	682f      	ldr	r7, [r5, #0]
 80030ea:	602b      	str	r3, [r5, #0]
 80030ec:	d032      	beq.n	8003154 <__sflush_r+0x98>
 80030ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	075a      	lsls	r2, r3, #29
 80030f4:	d505      	bpl.n	8003102 <__sflush_r+0x46>
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	1ac0      	subs	r0, r0, r3
 80030fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80030fc:	b10b      	cbz	r3, 8003102 <__sflush_r+0x46>
 80030fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003100:	1ac0      	subs	r0, r0, r3
 8003102:	2300      	movs	r3, #0
 8003104:	4602      	mov	r2, r0
 8003106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003108:	6a21      	ldr	r1, [r4, #32]
 800310a:	4628      	mov	r0, r5
 800310c:	47b0      	blx	r6
 800310e:	1c43      	adds	r3, r0, #1
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	d106      	bne.n	8003122 <__sflush_r+0x66>
 8003114:	6829      	ldr	r1, [r5, #0]
 8003116:	291d      	cmp	r1, #29
 8003118:	d82c      	bhi.n	8003174 <__sflush_r+0xb8>
 800311a:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <__sflush_r+0x108>)
 800311c:	40ca      	lsrs	r2, r1
 800311e:	07d6      	lsls	r6, r2, #31
 8003120:	d528      	bpl.n	8003174 <__sflush_r+0xb8>
 8003122:	2200      	movs	r2, #0
 8003124:	6062      	str	r2, [r4, #4]
 8003126:	04d9      	lsls	r1, r3, #19
 8003128:	6922      	ldr	r2, [r4, #16]
 800312a:	6022      	str	r2, [r4, #0]
 800312c:	d504      	bpl.n	8003138 <__sflush_r+0x7c>
 800312e:	1c42      	adds	r2, r0, #1
 8003130:	d101      	bne.n	8003136 <__sflush_r+0x7a>
 8003132:	682b      	ldr	r3, [r5, #0]
 8003134:	b903      	cbnz	r3, 8003138 <__sflush_r+0x7c>
 8003136:	6560      	str	r0, [r4, #84]	; 0x54
 8003138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800313a:	602f      	str	r7, [r5, #0]
 800313c:	2900      	cmp	r1, #0
 800313e:	d0ca      	beq.n	80030d6 <__sflush_r+0x1a>
 8003140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003144:	4299      	cmp	r1, r3
 8003146:	d002      	beq.n	800314e <__sflush_r+0x92>
 8003148:	4628      	mov	r0, r5
 800314a:	f000 f8fd 	bl	8003348 <_free_r>
 800314e:	2000      	movs	r0, #0
 8003150:	6360      	str	r0, [r4, #52]	; 0x34
 8003152:	e7c1      	b.n	80030d8 <__sflush_r+0x1c>
 8003154:	6a21      	ldr	r1, [r4, #32]
 8003156:	2301      	movs	r3, #1
 8003158:	4628      	mov	r0, r5
 800315a:	47b0      	blx	r6
 800315c:	1c41      	adds	r1, r0, #1
 800315e:	d1c7      	bne.n	80030f0 <__sflush_r+0x34>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0c4      	beq.n	80030f0 <__sflush_r+0x34>
 8003166:	2b1d      	cmp	r3, #29
 8003168:	d001      	beq.n	800316e <__sflush_r+0xb2>
 800316a:	2b16      	cmp	r3, #22
 800316c:	d101      	bne.n	8003172 <__sflush_r+0xb6>
 800316e:	602f      	str	r7, [r5, #0]
 8003170:	e7b1      	b.n	80030d6 <__sflush_r+0x1a>
 8003172:	89a3      	ldrh	r3, [r4, #12]
 8003174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003178:	81a3      	strh	r3, [r4, #12]
 800317a:	e7ad      	b.n	80030d8 <__sflush_r+0x1c>
 800317c:	690f      	ldr	r7, [r1, #16]
 800317e:	2f00      	cmp	r7, #0
 8003180:	d0a9      	beq.n	80030d6 <__sflush_r+0x1a>
 8003182:	0793      	lsls	r3, r2, #30
 8003184:	680e      	ldr	r6, [r1, #0]
 8003186:	bf08      	it	eq
 8003188:	694b      	ldreq	r3, [r1, #20]
 800318a:	600f      	str	r7, [r1, #0]
 800318c:	bf18      	it	ne
 800318e:	2300      	movne	r3, #0
 8003190:	eba6 0807 	sub.w	r8, r6, r7
 8003194:	608b      	str	r3, [r1, #8]
 8003196:	f1b8 0f00 	cmp.w	r8, #0
 800319a:	dd9c      	ble.n	80030d6 <__sflush_r+0x1a>
 800319c:	6a21      	ldr	r1, [r4, #32]
 800319e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031a0:	4643      	mov	r3, r8
 80031a2:	463a      	mov	r2, r7
 80031a4:	4628      	mov	r0, r5
 80031a6:	47b0      	blx	r6
 80031a8:	2800      	cmp	r0, #0
 80031aa:	dc06      	bgt.n	80031ba <__sflush_r+0xfe>
 80031ac:	89a3      	ldrh	r3, [r4, #12]
 80031ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b8:	e78e      	b.n	80030d8 <__sflush_r+0x1c>
 80031ba:	4407      	add	r7, r0
 80031bc:	eba8 0800 	sub.w	r8, r8, r0
 80031c0:	e7e9      	b.n	8003196 <__sflush_r+0xda>
 80031c2:	bf00      	nop
 80031c4:	20400001 	.word	0x20400001

080031c8 <_fflush_r>:
 80031c8:	b538      	push	{r3, r4, r5, lr}
 80031ca:	690b      	ldr	r3, [r1, #16]
 80031cc:	4605      	mov	r5, r0
 80031ce:	460c      	mov	r4, r1
 80031d0:	b913      	cbnz	r3, 80031d8 <_fflush_r+0x10>
 80031d2:	2500      	movs	r5, #0
 80031d4:	4628      	mov	r0, r5
 80031d6:	bd38      	pop	{r3, r4, r5, pc}
 80031d8:	b118      	cbz	r0, 80031e2 <_fflush_r+0x1a>
 80031da:	6983      	ldr	r3, [r0, #24]
 80031dc:	b90b      	cbnz	r3, 80031e2 <_fflush_r+0x1a>
 80031de:	f7ff fa15 	bl	800260c <__sinit>
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <_fflush_r+0x6c>)
 80031e4:	429c      	cmp	r4, r3
 80031e6:	d11b      	bne.n	8003220 <_fflush_r+0x58>
 80031e8:	686c      	ldr	r4, [r5, #4]
 80031ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0ef      	beq.n	80031d2 <_fflush_r+0xa>
 80031f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031f4:	07d0      	lsls	r0, r2, #31
 80031f6:	d404      	bmi.n	8003202 <_fflush_r+0x3a>
 80031f8:	0599      	lsls	r1, r3, #22
 80031fa:	d402      	bmi.n	8003202 <_fflush_r+0x3a>
 80031fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031fe:	f7ff faa3 	bl	8002748 <__retarget_lock_acquire_recursive>
 8003202:	4628      	mov	r0, r5
 8003204:	4621      	mov	r1, r4
 8003206:	f7ff ff59 	bl	80030bc <__sflush_r>
 800320a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800320c:	07da      	lsls	r2, r3, #31
 800320e:	4605      	mov	r5, r0
 8003210:	d4e0      	bmi.n	80031d4 <_fflush_r+0xc>
 8003212:	89a3      	ldrh	r3, [r4, #12]
 8003214:	059b      	lsls	r3, r3, #22
 8003216:	d4dd      	bmi.n	80031d4 <_fflush_r+0xc>
 8003218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800321a:	f7ff fa96 	bl	800274a <__retarget_lock_release_recursive>
 800321e:	e7d9      	b.n	80031d4 <_fflush_r+0xc>
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <_fflush_r+0x70>)
 8003222:	429c      	cmp	r4, r3
 8003224:	d101      	bne.n	800322a <_fflush_r+0x62>
 8003226:	68ac      	ldr	r4, [r5, #8]
 8003228:	e7df      	b.n	80031ea <_fflush_r+0x22>
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <_fflush_r+0x74>)
 800322c:	429c      	cmp	r4, r3
 800322e:	bf08      	it	eq
 8003230:	68ec      	ldreq	r4, [r5, #12]
 8003232:	e7da      	b.n	80031ea <_fflush_r+0x22>
 8003234:	080034e8 	.word	0x080034e8
 8003238:	08003508 	.word	0x08003508
 800323c:	080034c8 	.word	0x080034c8

08003240 <_lseek_r>:
 8003240:	b538      	push	{r3, r4, r5, lr}
 8003242:	4d07      	ldr	r5, [pc, #28]	; (8003260 <_lseek_r+0x20>)
 8003244:	4604      	mov	r4, r0
 8003246:	4608      	mov	r0, r1
 8003248:	4611      	mov	r1, r2
 800324a:	2200      	movs	r2, #0
 800324c:	602a      	str	r2, [r5, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	f7fd fcae 	bl	8000bb0 <_lseek>
 8003254:	1c43      	adds	r3, r0, #1
 8003256:	d102      	bne.n	800325e <_lseek_r+0x1e>
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	b103      	cbz	r3, 800325e <_lseek_r+0x1e>
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	bd38      	pop	{r3, r4, r5, pc}
 8003260:	200000f4 	.word	0x200000f4

08003264 <__swhatbuf_r>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	460e      	mov	r6, r1
 8003268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800326c:	2900      	cmp	r1, #0
 800326e:	b096      	sub	sp, #88	; 0x58
 8003270:	4614      	mov	r4, r2
 8003272:	461d      	mov	r5, r3
 8003274:	da08      	bge.n	8003288 <__swhatbuf_r+0x24>
 8003276:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	602a      	str	r2, [r5, #0]
 800327e:	061a      	lsls	r2, r3, #24
 8003280:	d410      	bmi.n	80032a4 <__swhatbuf_r+0x40>
 8003282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003286:	e00e      	b.n	80032a6 <__swhatbuf_r+0x42>
 8003288:	466a      	mov	r2, sp
 800328a:	f000 f8bb 	bl	8003404 <_fstat_r>
 800328e:	2800      	cmp	r0, #0
 8003290:	dbf1      	blt.n	8003276 <__swhatbuf_r+0x12>
 8003292:	9a01      	ldr	r2, [sp, #4]
 8003294:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003298:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800329c:	425a      	negs	r2, r3
 800329e:	415a      	adcs	r2, r3
 80032a0:	602a      	str	r2, [r5, #0]
 80032a2:	e7ee      	b.n	8003282 <__swhatbuf_r+0x1e>
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	2000      	movs	r0, #0
 80032a8:	6023      	str	r3, [r4, #0]
 80032aa:	b016      	add	sp, #88	; 0x58
 80032ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080032b0 <__smakebuf_r>:
 80032b0:	898b      	ldrh	r3, [r1, #12]
 80032b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032b4:	079d      	lsls	r5, r3, #30
 80032b6:	4606      	mov	r6, r0
 80032b8:	460c      	mov	r4, r1
 80032ba:	d507      	bpl.n	80032cc <__smakebuf_r+0x1c>
 80032bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032c0:	6023      	str	r3, [r4, #0]
 80032c2:	6123      	str	r3, [r4, #16]
 80032c4:	2301      	movs	r3, #1
 80032c6:	6163      	str	r3, [r4, #20]
 80032c8:	b002      	add	sp, #8
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	ab01      	add	r3, sp, #4
 80032ce:	466a      	mov	r2, sp
 80032d0:	f7ff ffc8 	bl	8003264 <__swhatbuf_r>
 80032d4:	9900      	ldr	r1, [sp, #0]
 80032d6:	4605      	mov	r5, r0
 80032d8:	4630      	mov	r0, r6
 80032da:	f7ff fa57 	bl	800278c <_malloc_r>
 80032de:	b948      	cbnz	r0, 80032f4 <__smakebuf_r+0x44>
 80032e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032e4:	059a      	lsls	r2, r3, #22
 80032e6:	d4ef      	bmi.n	80032c8 <__smakebuf_r+0x18>
 80032e8:	f023 0303 	bic.w	r3, r3, #3
 80032ec:	f043 0302 	orr.w	r3, r3, #2
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	e7e3      	b.n	80032bc <__smakebuf_r+0xc>
 80032f4:	4b0d      	ldr	r3, [pc, #52]	; (800332c <__smakebuf_r+0x7c>)
 80032f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	6020      	str	r0, [r4, #0]
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	81a3      	strh	r3, [r4, #12]
 8003302:	9b00      	ldr	r3, [sp, #0]
 8003304:	6163      	str	r3, [r4, #20]
 8003306:	9b01      	ldr	r3, [sp, #4]
 8003308:	6120      	str	r0, [r4, #16]
 800330a:	b15b      	cbz	r3, 8003324 <__smakebuf_r+0x74>
 800330c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003310:	4630      	mov	r0, r6
 8003312:	f000 f889 	bl	8003428 <_isatty_r>
 8003316:	b128      	cbz	r0, 8003324 <__smakebuf_r+0x74>
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	81a3      	strh	r3, [r4, #12]
 8003324:	89a0      	ldrh	r0, [r4, #12]
 8003326:	4305      	orrs	r5, r0
 8003328:	81a5      	strh	r5, [r4, #12]
 800332a:	e7cd      	b.n	80032c8 <__smakebuf_r+0x18>
 800332c:	080025a5 	.word	0x080025a5

08003330 <__malloc_lock>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__malloc_lock+0x8>)
 8003332:	f7ff ba09 	b.w	8002748 <__retarget_lock_acquire_recursive>
 8003336:	bf00      	nop
 8003338:	200000e8 	.word	0x200000e8

0800333c <__malloc_unlock>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__malloc_unlock+0x8>)
 800333e:	f7ff ba04 	b.w	800274a <__retarget_lock_release_recursive>
 8003342:	bf00      	nop
 8003344:	200000e8 	.word	0x200000e8

08003348 <_free_r>:
 8003348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800334a:	2900      	cmp	r1, #0
 800334c:	d044      	beq.n	80033d8 <_free_r+0x90>
 800334e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003352:	9001      	str	r0, [sp, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f1a1 0404 	sub.w	r4, r1, #4
 800335a:	bfb8      	it	lt
 800335c:	18e4      	addlt	r4, r4, r3
 800335e:	f7ff ffe7 	bl	8003330 <__malloc_lock>
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <_free_r+0x94>)
 8003364:	9801      	ldr	r0, [sp, #4]
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	b933      	cbnz	r3, 8003378 <_free_r+0x30>
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6014      	str	r4, [r2, #0]
 800336e:	b003      	add	sp, #12
 8003370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003374:	f7ff bfe2 	b.w	800333c <__malloc_unlock>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d908      	bls.n	800338e <_free_r+0x46>
 800337c:	6825      	ldr	r5, [r4, #0]
 800337e:	1961      	adds	r1, r4, r5
 8003380:	428b      	cmp	r3, r1
 8003382:	bf01      	itttt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	1949      	addeq	r1, r1, r5
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	e7ed      	b.n	800336a <_free_r+0x22>
 800338e:	461a      	mov	r2, r3
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b10b      	cbz	r3, 8003398 <_free_r+0x50>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d9fa      	bls.n	800338e <_free_r+0x46>
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	1855      	adds	r5, r2, r1
 800339c:	42a5      	cmp	r5, r4
 800339e:	d10b      	bne.n	80033b8 <_free_r+0x70>
 80033a0:	6824      	ldr	r4, [r4, #0]
 80033a2:	4421      	add	r1, r4
 80033a4:	1854      	adds	r4, r2, r1
 80033a6:	42a3      	cmp	r3, r4
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	d1e0      	bne.n	800336e <_free_r+0x26>
 80033ac:	681c      	ldr	r4, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	6053      	str	r3, [r2, #4]
 80033b2:	4421      	add	r1, r4
 80033b4:	6011      	str	r1, [r2, #0]
 80033b6:	e7da      	b.n	800336e <_free_r+0x26>
 80033b8:	d902      	bls.n	80033c0 <_free_r+0x78>
 80033ba:	230c      	movs	r3, #12
 80033bc:	6003      	str	r3, [r0, #0]
 80033be:	e7d6      	b.n	800336e <_free_r+0x26>
 80033c0:	6825      	ldr	r5, [r4, #0]
 80033c2:	1961      	adds	r1, r4, r5
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf04      	itt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	6063      	str	r3, [r4, #4]
 80033ce:	bf04      	itt	eq
 80033d0:	1949      	addeq	r1, r1, r5
 80033d2:	6021      	streq	r1, [r4, #0]
 80033d4:	6054      	str	r4, [r2, #4]
 80033d6:	e7ca      	b.n	800336e <_free_r+0x26>
 80033d8:	b003      	add	sp, #12
 80033da:	bd30      	pop	{r4, r5, pc}
 80033dc:	200000ec 	.word	0x200000ec

080033e0 <_read_r>:
 80033e0:	b538      	push	{r3, r4, r5, lr}
 80033e2:	4d07      	ldr	r5, [pc, #28]	; (8003400 <_read_r+0x20>)
 80033e4:	4604      	mov	r4, r0
 80033e6:	4608      	mov	r0, r1
 80033e8:	4611      	mov	r1, r2
 80033ea:	2200      	movs	r2, #0
 80033ec:	602a      	str	r2, [r5, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f7fd fb9a 	bl	8000b28 <_read>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_read_r+0x1e>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_read_r+0x1e>
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	200000f4 	.word	0x200000f4

08003404 <_fstat_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d07      	ldr	r5, [pc, #28]	; (8003424 <_fstat_r+0x20>)
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	f7fd fbb2 	bl	8000b7a <_fstat>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	d102      	bne.n	8003420 <_fstat_r+0x1c>
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	b103      	cbz	r3, 8003420 <_fstat_r+0x1c>
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	bf00      	nop
 8003424:	200000f4 	.word	0x200000f4

08003428 <_isatty_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4d06      	ldr	r5, [pc, #24]	; (8003444 <_isatty_r+0x1c>)
 800342c:	2300      	movs	r3, #0
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	602b      	str	r3, [r5, #0]
 8003434:	f7fd fbb1 	bl	8000b9a <_isatty>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d102      	bne.n	8003442 <_isatty_r+0x1a>
 800343c:	682b      	ldr	r3, [r5, #0]
 800343e:	b103      	cbz	r3, 8003442 <_isatty_r+0x1a>
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	bd38      	pop	{r3, r4, r5, pc}
 8003444:	200000f4 	.word	0x200000f4

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	bf00      	nop
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
